// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensaje.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mensaje_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mensaje_2eproto;
namespace chat {
class BroadcastMessage;
class BroadcastMessageDefaultTypeInternal;
extern BroadcastMessageDefaultTypeInternal _BroadcastMessage_default_instance_;
class BroadcastRequest;
class BroadcastRequestDefaultTypeInternal;
extern BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
class BroadcastResponse;
class BroadcastResponseDefaultTypeInternal;
extern BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
class ChangeStatusRequest;
class ChangeStatusRequestDefaultTypeInternal;
extern ChangeStatusRequestDefaultTypeInternal _ChangeStatusRequest_default_instance_;
class ChangeStatusResponse;
class ChangeStatusResponseDefaultTypeInternal;
extern ChangeStatusResponseDefaultTypeInternal _ChangeStatusResponse_default_instance_;
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ConnectedUser;
class ConnectedUserDefaultTypeInternal;
extern ConnectedUserDefaultTypeInternal _ConnectedUser_default_instance_;
class ConnectedUserResponse;
class ConnectedUserResponseDefaultTypeInternal;
extern ConnectedUserResponseDefaultTypeInternal _ConnectedUserResponse_default_instance_;
class DirectMessage;
class DirectMessageDefaultTypeInternal;
extern DirectMessageDefaultTypeInternal _DirectMessage_default_instance_;
class DirectMessageRequest;
class DirectMessageRequestDefaultTypeInternal;
extern DirectMessageRequestDefaultTypeInternal _DirectMessageRequest_default_instance_;
class DirectMessageResponse;
class DirectMessageResponseDefaultTypeInternal;
extern DirectMessageResponseDefaultTypeInternal _DirectMessageResponse_default_instance_;
class ErrorResponse;
class ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class MyInfoAcknowledge;
class MyInfoAcknowledgeDefaultTypeInternal;
extern MyInfoAcknowledgeDefaultTypeInternal _MyInfoAcknowledge_default_instance_;
class MyInfoResponse;
class MyInfoResponseDefaultTypeInternal;
extern MyInfoResponseDefaultTypeInternal _MyInfoResponse_default_instance_;
class MyInfoSynchronize;
class MyInfoSynchronizeDefaultTypeInternal;
extern MyInfoSynchronizeDefaultTypeInternal _MyInfoSynchronize_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class connectedUserRequest;
class connectedUserRequestDefaultTypeInternal;
extern connectedUserRequestDefaultTypeInternal _connectedUserRequest_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::BroadcastMessage* Arena::CreateMaybeMessage<::chat::BroadcastMessage>(Arena*);
template<> ::chat::BroadcastRequest* Arena::CreateMaybeMessage<::chat::BroadcastRequest>(Arena*);
template<> ::chat::BroadcastResponse* Arena::CreateMaybeMessage<::chat::BroadcastResponse>(Arena*);
template<> ::chat::ChangeStatusRequest* Arena::CreateMaybeMessage<::chat::ChangeStatusRequest>(Arena*);
template<> ::chat::ChangeStatusResponse* Arena::CreateMaybeMessage<::chat::ChangeStatusResponse>(Arena*);
template<> ::chat::ClientMessage* Arena::CreateMaybeMessage<::chat::ClientMessage>(Arena*);
template<> ::chat::ConnectedUser* Arena::CreateMaybeMessage<::chat::ConnectedUser>(Arena*);
template<> ::chat::ConnectedUserResponse* Arena::CreateMaybeMessage<::chat::ConnectedUserResponse>(Arena*);
template<> ::chat::DirectMessage* Arena::CreateMaybeMessage<::chat::DirectMessage>(Arena*);
template<> ::chat::DirectMessageRequest* Arena::CreateMaybeMessage<::chat::DirectMessageRequest>(Arena*);
template<> ::chat::DirectMessageResponse* Arena::CreateMaybeMessage<::chat::DirectMessageResponse>(Arena*);
template<> ::chat::ErrorResponse* Arena::CreateMaybeMessage<::chat::ErrorResponse>(Arena*);
template<> ::chat::MyInfoAcknowledge* Arena::CreateMaybeMessage<::chat::MyInfoAcknowledge>(Arena*);
template<> ::chat::MyInfoResponse* Arena::CreateMaybeMessage<::chat::MyInfoResponse>(Arena*);
template<> ::chat::MyInfoSynchronize* Arena::CreateMaybeMessage<::chat::MyInfoSynchronize>(Arena*);
template<> ::chat::ServerMessage* Arena::CreateMaybeMessage<::chat::ServerMessage>(Arena*);
template<> ::chat::connectedUserRequest* Arena::CreateMaybeMessage<::chat::connectedUserRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class MyInfoSynchronize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MyInfoSynchronize) */ {
 public:
  MyInfoSynchronize();
  virtual ~MyInfoSynchronize();

  MyInfoSynchronize(const MyInfoSynchronize& from);
  MyInfoSynchronize(MyInfoSynchronize&& from) noexcept
    : MyInfoSynchronize() {
    *this = ::std::move(from);
  }

  inline MyInfoSynchronize& operator=(const MyInfoSynchronize& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyInfoSynchronize& operator=(MyInfoSynchronize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyInfoSynchronize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyInfoSynchronize* internal_default_instance() {
    return reinterpret_cast<const MyInfoSynchronize*>(
               &_MyInfoSynchronize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyInfoSynchronize& a, MyInfoSynchronize& b) {
    a.Swap(&b);
  }
  inline void Swap(MyInfoSynchronize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyInfoSynchronize* New() const final {
    return CreateMaybeMessage<MyInfoSynchronize>(nullptr);
  }

  MyInfoSynchronize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyInfoSynchronize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyInfoSynchronize& from);
  void MergeFrom(const MyInfoSynchronize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyInfoSynchronize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MyInfoSynchronize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.MyInfoSynchronize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class MyInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MyInfoResponse) */ {
 public:
  MyInfoResponse();
  virtual ~MyInfoResponse();

  MyInfoResponse(const MyInfoResponse& from);
  MyInfoResponse(MyInfoResponse&& from) noexcept
    : MyInfoResponse() {
    *this = ::std::move(from);
  }

  inline MyInfoResponse& operator=(const MyInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyInfoResponse& operator=(MyInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyInfoResponse* internal_default_instance() {
    return reinterpret_cast<const MyInfoResponse*>(
               &_MyInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MyInfoResponse& a, MyInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MyInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyInfoResponse* New() const final {
    return CreateMaybeMessage<MyInfoResponse>(nullptr);
  }

  MyInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyInfoResponse& from);
  void MergeFrom(const MyInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MyInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // required int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.MyInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class MyInfoAcknowledge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MyInfoAcknowledge) */ {
 public:
  MyInfoAcknowledge();
  virtual ~MyInfoAcknowledge();

  MyInfoAcknowledge(const MyInfoAcknowledge& from);
  MyInfoAcknowledge(MyInfoAcknowledge&& from) noexcept
    : MyInfoAcknowledge() {
    *this = ::std::move(from);
  }

  inline MyInfoAcknowledge& operator=(const MyInfoAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyInfoAcknowledge& operator=(MyInfoAcknowledge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyInfoAcknowledge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyInfoAcknowledge* internal_default_instance() {
    return reinterpret_cast<const MyInfoAcknowledge*>(
               &_MyInfoAcknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MyInfoAcknowledge& a, MyInfoAcknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(MyInfoAcknowledge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyInfoAcknowledge* New() const final {
    return CreateMaybeMessage<MyInfoAcknowledge>(nullptr);
  }

  MyInfoAcknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyInfoAcknowledge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyInfoAcknowledge& from);
  void MergeFrom(const MyInfoAcknowledge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyInfoAcknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MyInfoAcknowledge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // required int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.MyInfoAcknowledge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class connectedUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.connectedUserRequest) */ {
 public:
  connectedUserRequest();
  virtual ~connectedUserRequest();

  connectedUserRequest(const connectedUserRequest& from);
  connectedUserRequest(connectedUserRequest&& from) noexcept
    : connectedUserRequest() {
    *this = ::std::move(from);
  }

  inline connectedUserRequest& operator=(const connectedUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline connectedUserRequest& operator=(connectedUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const connectedUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const connectedUserRequest* internal_default_instance() {
    return reinterpret_cast<const connectedUserRequest*>(
               &_connectedUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(connectedUserRequest& a, connectedUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(connectedUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline connectedUserRequest* New() const final {
    return CreateMaybeMessage<connectedUserRequest>(nullptr);
  }

  connectedUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<connectedUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const connectedUserRequest& from);
  void MergeFrom(const connectedUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(connectedUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.connectedUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // optional string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.connectedUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ConnectedUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ConnectedUser) */ {
 public:
  ConnectedUser();
  virtual ~ConnectedUser();

  ConnectedUser(const ConnectedUser& from);
  ConnectedUser(ConnectedUser&& from) noexcept
    : ConnectedUser() {
    *this = ::std::move(from);
  }

  inline ConnectedUser& operator=(const ConnectedUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedUser& operator=(ConnectedUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectedUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectedUser* internal_default_instance() {
    return reinterpret_cast<const ConnectedUser*>(
               &_ConnectedUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectedUser& a, ConnectedUser& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectedUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectedUser* New() const final {
    return CreateMaybeMessage<ConnectedUser>(nullptr);
  }

  ConnectedUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectedUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectedUser& from);
  void MergeFrom(const ConnectedUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectedUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ConnectedUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kIpFieldNumber = 4,
    kUserIdFieldNumber = 3,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // optional string ip = 4;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional int32 userId = 3;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ConnectedUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ConnectedUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ConnectedUserResponse) */ {
 public:
  ConnectedUserResponse();
  virtual ~ConnectedUserResponse();

  ConnectedUserResponse(const ConnectedUserResponse& from);
  ConnectedUserResponse(ConnectedUserResponse&& from) noexcept
    : ConnectedUserResponse() {
    *this = ::std::move(from);
  }

  inline ConnectedUserResponse& operator=(const ConnectedUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedUserResponse& operator=(ConnectedUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectedUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectedUserResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectedUserResponse*>(
               &_ConnectedUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConnectedUserResponse& a, ConnectedUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectedUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectedUserResponse* New() const final {
    return CreateMaybeMessage<ConnectedUserResponse>(nullptr);
  }

  ConnectedUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectedUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectedUserResponse& from);
  void MergeFrom(const ConnectedUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectedUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ConnectedUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedUsersFieldNumber = 1,
  };
  // repeated .chat.ConnectedUser connectedUsers = 1;
  int connectedusers_size() const;
  private:
  int _internal_connectedusers_size() const;
  public:
  void clear_connectedusers();
  ::chat::ConnectedUser* mutable_connectedusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::ConnectedUser >*
      mutable_connectedusers();
  private:
  const ::chat::ConnectedUser& _internal_connectedusers(int index) const;
  ::chat::ConnectedUser* _internal_add_connectedusers();
  public:
  const ::chat::ConnectedUser& connectedusers(int index) const;
  ::chat::ConnectedUser* add_connectedusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::ConnectedUser >&
      connectedusers() const;

  // @@protoc_insertion_point(class_scope:chat.ConnectedUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::ConnectedUser > connectedusers_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChangeStatusRequest) */ {
 public:
  ChangeStatusRequest();
  virtual ~ChangeStatusRequest();

  ChangeStatusRequest(const ChangeStatusRequest& from);
  ChangeStatusRequest(ChangeStatusRequest&& from) noexcept
    : ChangeStatusRequest() {
    *this = ::std::move(from);
  }

  inline ChangeStatusRequest& operator=(const ChangeStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatusRequest& operator=(ChangeStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeStatusRequest*>(
               &_ChangeStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChangeStatusRequest& a, ChangeStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeStatusRequest* New() const final {
    return CreateMaybeMessage<ChangeStatusRequest>(nullptr);
  }

  ChangeStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeStatusRequest& from);
  void MergeFrom(const ChangeStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChangeStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // required string status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChangeStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChangeStatusResponse) */ {
 public:
  ChangeStatusResponse();
  virtual ~ChangeStatusResponse();

  ChangeStatusResponse(const ChangeStatusResponse& from);
  ChangeStatusResponse(ChangeStatusResponse&& from) noexcept
    : ChangeStatusResponse() {
    *this = ::std::move(from);
  }

  inline ChangeStatusResponse& operator=(const ChangeStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatusResponse& operator=(ChangeStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeStatusResponse*>(
               &_ChangeStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChangeStatusResponse& a, ChangeStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeStatusResponse* New() const final {
    return CreateMaybeMessage<ChangeStatusResponse>(nullptr);
  }

  ChangeStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeStatusResponse& from);
  void MergeFrom(const ChangeStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChangeStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // required string status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // required int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ChangeStatusResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.BroadcastRequest) */ {
 public:
  BroadcastRequest();
  virtual ~BroadcastRequest();

  BroadcastRequest(const BroadcastRequest& from);
  BroadcastRequest(BroadcastRequest&& from) noexcept
    : BroadcastRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastRequest& operator=(const BroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRequest& operator=(BroadcastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRequest*>(
               &_BroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BroadcastRequest& a, BroadcastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRequest* New() const final {
    return CreateMaybeMessage<BroadcastRequest>(nullptr);
  }

  BroadcastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastRequest& from);
  void MergeFrom(const BroadcastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.BroadcastRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.BroadcastRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class BroadcastResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.BroadcastResponse) */ {
 public:
  BroadcastResponse();
  virtual ~BroadcastResponse();

  BroadcastResponse(const BroadcastResponse& from);
  BroadcastResponse(BroadcastResponse&& from) noexcept
    : BroadcastResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastResponse& operator=(const BroadcastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastResponse& operator=(BroadcastResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastResponse*>(
               &_BroadcastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BroadcastResponse& a, BroadcastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastResponse* New() const final {
    return CreateMaybeMessage<BroadcastResponse>(nullptr);
  }

  BroadcastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastResponse& from);
  void MergeFrom(const BroadcastResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.BroadcastResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageStatusFieldNumber = 1,
  };
  // required string messageStatus = 1;
  bool has_messagestatus() const;
  private:
  bool _internal_has_messagestatus() const;
  public:
  void clear_messagestatus();
  const std::string& messagestatus() const;
  void set_messagestatus(const std::string& value);
  void set_messagestatus(std::string&& value);
  void set_messagestatus(const char* value);
  void set_messagestatus(const char* value, size_t size);
  std::string* mutable_messagestatus();
  std::string* release_messagestatus();
  void set_allocated_messagestatus(std::string* messagestatus);
  private:
  const std::string& _internal_messagestatus() const;
  void _internal_set_messagestatus(const std::string& value);
  std::string* _internal_mutable_messagestatus();
  public:

  // @@protoc_insertion_point(class_scope:chat.BroadcastResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagestatus_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class BroadcastMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.BroadcastMessage) */ {
 public:
  BroadcastMessage();
  virtual ~BroadcastMessage();

  BroadcastMessage(const BroadcastMessage& from);
  BroadcastMessage(BroadcastMessage&& from) noexcept
    : BroadcastMessage() {
    *this = ::std::move(from);
  }

  inline BroadcastMessage& operator=(const BroadcastMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastMessage& operator=(BroadcastMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastMessage* internal_default_instance() {
    return reinterpret_cast<const BroadcastMessage*>(
               &_BroadcastMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BroadcastMessage& a, BroadcastMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastMessage* New() const final {
    return CreateMaybeMessage<BroadcastMessage>(nullptr);
  }

  BroadcastMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastMessage& from);
  void MergeFrom(const BroadcastMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.BroadcastMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.BroadcastMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class DirectMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.DirectMessageRequest) */ {
 public:
  DirectMessageRequest();
  virtual ~DirectMessageRequest();

  DirectMessageRequest(const DirectMessageRequest& from);
  DirectMessageRequest(DirectMessageRequest&& from) noexcept
    : DirectMessageRequest() {
    *this = ::std::move(from);
  }

  inline DirectMessageRequest& operator=(const DirectMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectMessageRequest& operator=(DirectMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DirectMessageRequest*>(
               &_DirectMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DirectMessageRequest& a, DirectMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectMessageRequest* New() const final {
    return CreateMaybeMessage<DirectMessageRequest>(nullptr);
  }

  DirectMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectMessageRequest& from);
  void MergeFrom(const DirectMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.DirectMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kUsernameFieldNumber = 3,
    kUserIdFieldNumber = 2,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.DirectMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class DirectMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.DirectMessageResponse) */ {
 public:
  DirectMessageResponse();
  virtual ~DirectMessageResponse();

  DirectMessageResponse(const DirectMessageResponse& from);
  DirectMessageResponse(DirectMessageResponse&& from) noexcept
    : DirectMessageResponse() {
    *this = ::std::move(from);
  }

  inline DirectMessageResponse& operator=(const DirectMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectMessageResponse& operator=(DirectMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectMessageResponse* internal_default_instance() {
    return reinterpret_cast<const DirectMessageResponse*>(
               &_DirectMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DirectMessageResponse& a, DirectMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectMessageResponse* New() const final {
    return CreateMaybeMessage<DirectMessageResponse>(nullptr);
  }

  DirectMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectMessageResponse& from);
  void MergeFrom(const DirectMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.DirectMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageStatusFieldNumber = 1,
  };
  // required string messageStatus = 1;
  bool has_messagestatus() const;
  private:
  bool _internal_has_messagestatus() const;
  public:
  void clear_messagestatus();
  const std::string& messagestatus() const;
  void set_messagestatus(const std::string& value);
  void set_messagestatus(std::string&& value);
  void set_messagestatus(const char* value);
  void set_messagestatus(const char* value, size_t size);
  std::string* mutable_messagestatus();
  std::string* release_messagestatus();
  void set_allocated_messagestatus(std::string* messagestatus);
  private:
  const std::string& _internal_messagestatus() const;
  void _internal_set_messagestatus(const std::string& value);
  std::string* _internal_mutable_messagestatus();
  public:

  // @@protoc_insertion_point(class_scope:chat.DirectMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagestatus_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class DirectMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.DirectMessage) */ {
 public:
  DirectMessage();
  virtual ~DirectMessage();

  DirectMessage(const DirectMessage& from);
  DirectMessage(DirectMessage&& from) noexcept
    : DirectMessage() {
    *this = ::std::move(from);
  }

  inline DirectMessage& operator=(const DirectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectMessage& operator=(DirectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectMessage* internal_default_instance() {
    return reinterpret_cast<const DirectMessage*>(
               &_DirectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DirectMessage& a, DirectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectMessage* New() const final {
    return CreateMaybeMessage<DirectMessage>(nullptr);
  }

  DirectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectMessage& from);
  void MergeFrom(const DirectMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.DirectMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.DirectMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ErrorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ErrorResponse) */ {
 public:
  ErrorResponse();
  virtual ~ErrorResponse();

  ErrorResponse(const ErrorResponse& from);
  ErrorResponse(ErrorResponse&& from) noexcept
    : ErrorResponse() {
    *this = ::std::move(from);
  }

  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
               &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ErrorResponse& a, ErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorResponse* New() const final {
    return CreateMaybeMessage<ErrorResponse>(nullptr);
  }

  ErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorResponse& from);
  void MergeFrom(const ErrorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ErrorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // required string errorMessage = 1;
  bool has_errormessage() const;
  private:
  bool _internal_has_errormessage() const;
  public:
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:chat.ErrorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynchronizeFieldNumber = 3,
    kConnectedUsersFieldNumber = 4,
    kChangeStatusFieldNumber = 5,
    kBroadcastFieldNumber = 6,
    kDirectMessageFieldNumber = 7,
    kAcknowledgeFieldNumber = 8,
    kOptionFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional .chat.MyInfoSynchronize synchronize = 3;
  bool has_synchronize() const;
  private:
  bool _internal_has_synchronize() const;
  public:
  void clear_synchronize();
  const ::chat::MyInfoSynchronize& synchronize() const;
  ::chat::MyInfoSynchronize* release_synchronize();
  ::chat::MyInfoSynchronize* mutable_synchronize();
  void set_allocated_synchronize(::chat::MyInfoSynchronize* synchronize);
  private:
  const ::chat::MyInfoSynchronize& _internal_synchronize() const;
  ::chat::MyInfoSynchronize* _internal_mutable_synchronize();
  public:

  // optional .chat.connectedUserRequest connectedUsers = 4;
  bool has_connectedusers() const;
  private:
  bool _internal_has_connectedusers() const;
  public:
  void clear_connectedusers();
  const ::chat::connectedUserRequest& connectedusers() const;
  ::chat::connectedUserRequest* release_connectedusers();
  ::chat::connectedUserRequest* mutable_connectedusers();
  void set_allocated_connectedusers(::chat::connectedUserRequest* connectedusers);
  private:
  const ::chat::connectedUserRequest& _internal_connectedusers() const;
  ::chat::connectedUserRequest* _internal_mutable_connectedusers();
  public:

  // optional .chat.ChangeStatusRequest changeStatus = 5;
  bool has_changestatus() const;
  private:
  bool _internal_has_changestatus() const;
  public:
  void clear_changestatus();
  const ::chat::ChangeStatusRequest& changestatus() const;
  ::chat::ChangeStatusRequest* release_changestatus();
  ::chat::ChangeStatusRequest* mutable_changestatus();
  void set_allocated_changestatus(::chat::ChangeStatusRequest* changestatus);
  private:
  const ::chat::ChangeStatusRequest& _internal_changestatus() const;
  ::chat::ChangeStatusRequest* _internal_mutable_changestatus();
  public:

  // optional .chat.BroadcastRequest broadcast = 6;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::chat::BroadcastRequest& broadcast() const;
  ::chat::BroadcastRequest* release_broadcast();
  ::chat::BroadcastRequest* mutable_broadcast();
  void set_allocated_broadcast(::chat::BroadcastRequest* broadcast);
  private:
  const ::chat::BroadcastRequest& _internal_broadcast() const;
  ::chat::BroadcastRequest* _internal_mutable_broadcast();
  public:

  // optional .chat.DirectMessageRequest directMessage = 7;
  bool has_directmessage() const;
  private:
  bool _internal_has_directmessage() const;
  public:
  void clear_directmessage();
  const ::chat::DirectMessageRequest& directmessage() const;
  ::chat::DirectMessageRequest* release_directmessage();
  ::chat::DirectMessageRequest* mutable_directmessage();
  void set_allocated_directmessage(::chat::DirectMessageRequest* directmessage);
  private:
  const ::chat::DirectMessageRequest& _internal_directmessage() const;
  ::chat::DirectMessageRequest* _internal_mutable_directmessage();
  public:

  // optional .chat.MyInfoAcknowledge acknowledge = 8;
  bool has_acknowledge() const;
  private:
  bool _internal_has_acknowledge() const;
  public:
  void clear_acknowledge();
  const ::chat::MyInfoAcknowledge& acknowledge() const;
  ::chat::MyInfoAcknowledge* release_acknowledge();
  ::chat::MyInfoAcknowledge* mutable_acknowledge();
  void set_allocated_acknowledge(::chat::MyInfoAcknowledge* acknowledge);
  private:
  const ::chat::MyInfoAcknowledge& _internal_acknowledge() const;
  ::chat::MyInfoAcknowledge* _internal_mutable_acknowledge();
  public:

  // required int32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  ::PROTOBUF_NAMESPACE_ID::int32 option() const;
  void set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_option() const;
  void _internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ClientMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::chat::MyInfoSynchronize* synchronize_;
  ::chat::connectedUserRequest* connectedusers_;
  ::chat::ChangeStatusRequest* changestatus_;
  ::chat::BroadcastRequest* broadcast_;
  ::chat::DirectMessageRequest* directmessage_;
  ::chat::MyInfoAcknowledge* acknowledge_;
  ::PROTOBUF_NAMESPACE_ID::int32 option_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastFieldNumber = 2,
    kMessageFieldNumber = 3,
    kErrorFieldNumber = 4,
    kMyInfoResponseFieldNumber = 5,
    kConnectedUserResponseFieldNumber = 6,
    kChangeStatusResponseFieldNumber = 7,
    kBroadcastResponseFieldNumber = 8,
    kDirectMessageResponseFieldNumber = 9,
    kOptionFieldNumber = 1,
  };
  // optional .chat.BroadcastMessage broadcast = 2;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::chat::BroadcastMessage& broadcast() const;
  ::chat::BroadcastMessage* release_broadcast();
  ::chat::BroadcastMessage* mutable_broadcast();
  void set_allocated_broadcast(::chat::BroadcastMessage* broadcast);
  private:
  const ::chat::BroadcastMessage& _internal_broadcast() const;
  ::chat::BroadcastMessage* _internal_mutable_broadcast();
  public:

  // optional .chat.DirectMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::DirectMessage& message() const;
  ::chat::DirectMessage* release_message();
  ::chat::DirectMessage* mutable_message();
  void set_allocated_message(::chat::DirectMessage* message);
  private:
  const ::chat::DirectMessage& _internal_message() const;
  ::chat::DirectMessage* _internal_mutable_message();
  public:

  // optional .chat.ErrorResponse error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::chat::ErrorResponse& error() const;
  ::chat::ErrorResponse* release_error();
  ::chat::ErrorResponse* mutable_error();
  void set_allocated_error(::chat::ErrorResponse* error);
  private:
  const ::chat::ErrorResponse& _internal_error() const;
  ::chat::ErrorResponse* _internal_mutable_error();
  public:

  // optional .chat.MyInfoResponse myInfoResponse = 5;
  bool has_myinforesponse() const;
  private:
  bool _internal_has_myinforesponse() const;
  public:
  void clear_myinforesponse();
  const ::chat::MyInfoResponse& myinforesponse() const;
  ::chat::MyInfoResponse* release_myinforesponse();
  ::chat::MyInfoResponse* mutable_myinforesponse();
  void set_allocated_myinforesponse(::chat::MyInfoResponse* myinforesponse);
  private:
  const ::chat::MyInfoResponse& _internal_myinforesponse() const;
  ::chat::MyInfoResponse* _internal_mutable_myinforesponse();
  public:

  // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
  bool has_connecteduserresponse() const;
  private:
  bool _internal_has_connecteduserresponse() const;
  public:
  void clear_connecteduserresponse();
  const ::chat::ConnectedUserResponse& connecteduserresponse() const;
  ::chat::ConnectedUserResponse* release_connecteduserresponse();
  ::chat::ConnectedUserResponse* mutable_connecteduserresponse();
  void set_allocated_connecteduserresponse(::chat::ConnectedUserResponse* connecteduserresponse);
  private:
  const ::chat::ConnectedUserResponse& _internal_connecteduserresponse() const;
  ::chat::ConnectedUserResponse* _internal_mutable_connecteduserresponse();
  public:

  // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
  bool has_changestatusresponse() const;
  private:
  bool _internal_has_changestatusresponse() const;
  public:
  void clear_changestatusresponse();
  const ::chat::ChangeStatusResponse& changestatusresponse() const;
  ::chat::ChangeStatusResponse* release_changestatusresponse();
  ::chat::ChangeStatusResponse* mutable_changestatusresponse();
  void set_allocated_changestatusresponse(::chat::ChangeStatusResponse* changestatusresponse);
  private:
  const ::chat::ChangeStatusResponse& _internal_changestatusresponse() const;
  ::chat::ChangeStatusResponse* _internal_mutable_changestatusresponse();
  public:

  // optional .chat.BroadcastResponse broadcastResponse = 8;
  bool has_broadcastresponse() const;
  private:
  bool _internal_has_broadcastresponse() const;
  public:
  void clear_broadcastresponse();
  const ::chat::BroadcastResponse& broadcastresponse() const;
  ::chat::BroadcastResponse* release_broadcastresponse();
  ::chat::BroadcastResponse* mutable_broadcastresponse();
  void set_allocated_broadcastresponse(::chat::BroadcastResponse* broadcastresponse);
  private:
  const ::chat::BroadcastResponse& _internal_broadcastresponse() const;
  ::chat::BroadcastResponse* _internal_mutable_broadcastresponse();
  public:

  // optional .chat.DirectMessageResponse directMessageResponse = 9;
  bool has_directmessageresponse() const;
  private:
  bool _internal_has_directmessageresponse() const;
  public:
  void clear_directmessageresponse();
  const ::chat::DirectMessageResponse& directmessageresponse() const;
  ::chat::DirectMessageResponse* release_directmessageresponse();
  ::chat::DirectMessageResponse* mutable_directmessageresponse();
  void set_allocated_directmessageresponse(::chat::DirectMessageResponse* directmessageresponse);
  private:
  const ::chat::DirectMessageResponse& _internal_directmessageresponse() const;
  ::chat::DirectMessageResponse* _internal_mutable_directmessageresponse();
  public:

  // required int32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  ::PROTOBUF_NAMESPACE_ID::int32 option() const;
  void set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_option() const;
  void _internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ServerMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::chat::BroadcastMessage* broadcast_;
  ::chat::DirectMessage* message_;
  ::chat::ErrorResponse* error_;
  ::chat::MyInfoResponse* myinforesponse_;
  ::chat::ConnectedUserResponse* connecteduserresponse_;
  ::chat::ChangeStatusResponse* changestatusresponse_;
  ::chat::BroadcastResponse* broadcastresponse_;
  ::chat::DirectMessageResponse* directmessageresponse_;
  ::PROTOBUF_NAMESPACE_ID::int32 option_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyInfoSynchronize

// required string username = 1;
inline bool MyInfoSynchronize::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MyInfoSynchronize::has_username() const {
  return _internal_has_username();
}
inline void MyInfoSynchronize::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MyInfoSynchronize::username() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoSynchronize.username)
  return _internal_username();
}
inline void MyInfoSynchronize::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.MyInfoSynchronize.username)
}
inline std::string* MyInfoSynchronize::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.MyInfoSynchronize.username)
  return _internal_mutable_username();
}
inline const std::string& MyInfoSynchronize::_internal_username() const {
  return username_.GetNoArena();
}
inline void MyInfoSynchronize::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MyInfoSynchronize::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MyInfoSynchronize.username)
}
inline void MyInfoSynchronize::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MyInfoSynchronize.username)
}
inline void MyInfoSynchronize::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MyInfoSynchronize.username)
}
inline std::string* MyInfoSynchronize::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MyInfoSynchronize::release_username() {
  // @@protoc_insertion_point(field_release:chat.MyInfoSynchronize.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MyInfoSynchronize::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.MyInfoSynchronize.username)
}

// optional string ip = 2;
inline bool MyInfoSynchronize::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MyInfoSynchronize::has_ip() const {
  return _internal_has_ip();
}
inline void MyInfoSynchronize::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MyInfoSynchronize::ip() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoSynchronize.ip)
  return _internal_ip();
}
inline void MyInfoSynchronize::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.MyInfoSynchronize.ip)
}
inline std::string* MyInfoSynchronize::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.MyInfoSynchronize.ip)
  return _internal_mutable_ip();
}
inline const std::string& MyInfoSynchronize::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MyInfoSynchronize::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MyInfoSynchronize::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MyInfoSynchronize.ip)
}
inline void MyInfoSynchronize::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MyInfoSynchronize.ip)
}
inline void MyInfoSynchronize::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MyInfoSynchronize.ip)
}
inline std::string* MyInfoSynchronize::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MyInfoSynchronize::release_ip() {
  // @@protoc_insertion_point(field_release:chat.MyInfoSynchronize.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MyInfoSynchronize::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.MyInfoSynchronize.ip)
}

// -------------------------------------------------------------------

// MyInfoResponse

// required int32 userId = 1;
inline bool MyInfoResponse::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MyInfoResponse::has_userid() const {
  return _internal_has_userid();
}
inline void MyInfoResponse::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyInfoResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyInfoResponse::userid() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoResponse.userId)
  return _internal_userid();
}
inline void MyInfoResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void MyInfoResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.MyInfoResponse.userId)
}

// -------------------------------------------------------------------

// MyInfoAcknowledge

// required int32 userId = 1;
inline bool MyInfoAcknowledge::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MyInfoAcknowledge::has_userid() const {
  return _internal_has_userid();
}
inline void MyInfoAcknowledge::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyInfoAcknowledge::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyInfoAcknowledge::userid() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoAcknowledge.userId)
  return _internal_userid();
}
inline void MyInfoAcknowledge::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void MyInfoAcknowledge::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.MyInfoAcknowledge.userId)
}

// -------------------------------------------------------------------

// connectedUserRequest

// optional int32 userId = 1;
inline bool connectedUserRequest::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool connectedUserRequest::has_userid() const {
  return _internal_has_userid();
}
inline void connectedUserRequest::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedUserRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:chat.connectedUserRequest.userId)
  return _internal_userid();
}
inline void connectedUserRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void connectedUserRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.connectedUserRequest.userId)
}

// optional string username = 2;
inline bool connectedUserRequest::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool connectedUserRequest::has_username() const {
  return _internal_has_username();
}
inline void connectedUserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& connectedUserRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.connectedUserRequest.username)
  return _internal_username();
}
inline void connectedUserRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.connectedUserRequest.username)
}
inline std::string* connectedUserRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.connectedUserRequest.username)
  return _internal_mutable_username();
}
inline const std::string& connectedUserRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void connectedUserRequest::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void connectedUserRequest::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.connectedUserRequest.username)
}
inline void connectedUserRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.connectedUserRequest.username)
}
inline void connectedUserRequest::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.connectedUserRequest.username)
}
inline std::string* connectedUserRequest::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* connectedUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.connectedUserRequest.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void connectedUserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.connectedUserRequest.username)
}

// -------------------------------------------------------------------

// ConnectedUser

// required string username = 1;
inline bool ConnectedUser::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConnectedUser::has_username() const {
  return _internal_has_username();
}
inline void ConnectedUser::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectedUser::username() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.username)
  return _internal_username();
}
inline void ConnectedUser::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.username)
}
inline std::string* ConnectedUser::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUser.username)
  return _internal_mutable_username();
}
inline const std::string& ConnectedUser::_internal_username() const {
  return username_.GetNoArena();
}
inline void ConnectedUser::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnectedUser::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ConnectedUser.username)
}
inline void ConnectedUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectedUser.username)
}
inline void ConnectedUser::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectedUser.username)
}
inline std::string* ConnectedUser::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectedUser::release_username() {
  // @@protoc_insertion_point(field_release:chat.ConnectedUser.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectedUser::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectedUser.username)
}

// optional string status = 2;
inline bool ConnectedUser::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConnectedUser::has_status() const {
  return _internal_has_status();
}
inline void ConnectedUser::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConnectedUser::status() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.status)
  return _internal_status();
}
inline void ConnectedUser::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.status)
}
inline std::string* ConnectedUser::mutable_status() {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUser.status)
  return _internal_mutable_status();
}
inline const std::string& ConnectedUser::_internal_status() const {
  return status_.GetNoArena();
}
inline void ConnectedUser::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnectedUser::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ConnectedUser.status)
}
inline void ConnectedUser::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectedUser.status)
}
inline void ConnectedUser::set_status(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectedUser.status)
}
inline std::string* ConnectedUser::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000002u;
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectedUser::release_status() {
  // @@protoc_insertion_point(field_release:chat.ConnectedUser.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return status_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectedUser::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectedUser.status)
}

// optional int32 userId = 3;
inline bool ConnectedUser::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConnectedUser::has_userid() const {
  return _internal_has_userid();
}
inline void ConnectedUser::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectedUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectedUser::userid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.userId)
  return _internal_userid();
}
inline void ConnectedUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  userid_ = value;
}
inline void ConnectedUser::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.userId)
}

// optional string ip = 4;
inline bool ConnectedUser::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConnectedUser::has_ip() const {
  return _internal_has_ip();
}
inline void ConnectedUser::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConnectedUser::ip() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.ip)
  return _internal_ip();
}
inline void ConnectedUser::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.ip)
}
inline std::string* ConnectedUser::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUser.ip)
  return _internal_mutable_ip();
}
inline const std::string& ConnectedUser::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void ConnectedUser::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnectedUser::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ConnectedUser.ip)
}
inline void ConnectedUser::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectedUser.ip)
}
inline void ConnectedUser::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectedUser.ip)
}
inline std::string* ConnectedUser::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000004u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectedUser::release_ip() {
  // @@protoc_insertion_point(field_release:chat.ConnectedUser.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectedUser::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectedUser.ip)
}

// -------------------------------------------------------------------

// ConnectedUserResponse

// repeated .chat.ConnectedUser connectedUsers = 1;
inline int ConnectedUserResponse::_internal_connectedusers_size() const {
  return connectedusers_.size();
}
inline int ConnectedUserResponse::connectedusers_size() const {
  return _internal_connectedusers_size();
}
inline void ConnectedUserResponse::clear_connectedusers() {
  connectedusers_.Clear();
}
inline ::chat::ConnectedUser* ConnectedUserResponse::mutable_connectedusers(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUserResponse.connectedUsers)
  return connectedusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::ConnectedUser >*
ConnectedUserResponse::mutable_connectedusers() {
  // @@protoc_insertion_point(field_mutable_list:chat.ConnectedUserResponse.connectedUsers)
  return &connectedusers_;
}
inline const ::chat::ConnectedUser& ConnectedUserResponse::_internal_connectedusers(int index) const {
  return connectedusers_.Get(index);
}
inline const ::chat::ConnectedUser& ConnectedUserResponse::connectedusers(int index) const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUserResponse.connectedUsers)
  return _internal_connectedusers(index);
}
inline ::chat::ConnectedUser* ConnectedUserResponse::_internal_add_connectedusers() {
  return connectedusers_.Add();
}
inline ::chat::ConnectedUser* ConnectedUserResponse::add_connectedusers() {
  // @@protoc_insertion_point(field_add:chat.ConnectedUserResponse.connectedUsers)
  return _internal_add_connectedusers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::ConnectedUser >&
ConnectedUserResponse::connectedusers() const {
  // @@protoc_insertion_point(field_list:chat.ConnectedUserResponse.connectedUsers)
  return connectedusers_;
}

// -------------------------------------------------------------------

// ChangeStatusRequest

// required string status = 1;
inline bool ChangeStatusRequest::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeStatusRequest::has_status() const {
  return _internal_has_status();
}
inline void ChangeStatusRequest::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatusRequest.status)
  return _internal_status();
}
inline void ChangeStatusRequest::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatusRequest.status)
}
inline std::string* ChangeStatusRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatusRequest.status)
  return _internal_mutable_status();
}
inline const std::string& ChangeStatusRequest::_internal_status() const {
  return status_.GetNoArena();
}
inline void ChangeStatusRequest::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangeStatusRequest::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ChangeStatusRequest.status)
}
inline void ChangeStatusRequest::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatusRequest.status)
}
inline void ChangeStatusRequest::set_status(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatusRequest.status)
}
inline std::string* ChangeStatusRequest::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangeStatusRequest::release_status() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatusRequest.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return status_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeStatusRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatusRequest.status)
}

// -------------------------------------------------------------------

// ChangeStatusResponse

// required int32 userId = 1;
inline bool ChangeStatusResponse::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeStatusResponse::has_userid() const {
  return _internal_has_userid();
}
inline void ChangeStatusResponse::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeStatusResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeStatusResponse::userid() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatusResponse.userId)
  return _internal_userid();
}
inline void ChangeStatusResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void ChangeStatusResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatusResponse.userId)
}

// required string status = 2;
inline bool ChangeStatusResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void ChangeStatusResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatusResponse.status)
  return _internal_status();
}
inline void ChangeStatusResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatusResponse.status)
}
inline std::string* ChangeStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatusResponse.status)
  return _internal_mutable_status();
}
inline const std::string& ChangeStatusResponse::_internal_status() const {
  return status_.GetNoArena();
}
inline void ChangeStatusResponse::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangeStatusResponse::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ChangeStatusResponse.status)
}
inline void ChangeStatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatusResponse.status)
}
inline void ChangeStatusResponse::set_status(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatusResponse.status)
}
inline std::string* ChangeStatusResponse::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangeStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatusResponse.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return status_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeStatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatusResponse.status)
}

// -------------------------------------------------------------------

// BroadcastRequest

// required string message = 1;
inline bool BroadcastRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastRequest::has_message() const {
  return _internal_has_message();
}
inline void BroadcastRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastRequest.message)
  return _internal_message();
}
inline void BroadcastRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastRequest.message)
}
inline std::string* BroadcastRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.BroadcastRequest.message)
  return _internal_mutable_message();
}
inline const std::string& BroadcastRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void BroadcastRequest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcastRequest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BroadcastRequest.message)
}
inline void BroadcastRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastRequest.message)
}
inline void BroadcastRequest::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastRequest.message)
}
inline std::string* BroadcastRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.BroadcastRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastRequest.message)
}

// -------------------------------------------------------------------

// BroadcastResponse

// required string messageStatus = 1;
inline bool BroadcastResponse::_internal_has_messagestatus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastResponse::has_messagestatus() const {
  return _internal_has_messagestatus();
}
inline void BroadcastResponse::clear_messagestatus() {
  messagestatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastResponse::messagestatus() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastResponse.messageStatus)
  return _internal_messagestatus();
}
inline void BroadcastResponse::set_messagestatus(const std::string& value) {
  _internal_set_messagestatus(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastResponse.messageStatus)
}
inline std::string* BroadcastResponse::mutable_messagestatus() {
  // @@protoc_insertion_point(field_mutable:chat.BroadcastResponse.messageStatus)
  return _internal_mutable_messagestatus();
}
inline const std::string& BroadcastResponse::_internal_messagestatus() const {
  return messagestatus_.GetNoArena();
}
inline void BroadcastResponse::_internal_set_messagestatus(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcastResponse::set_messagestatus(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BroadcastResponse.messageStatus)
}
inline void BroadcastResponse::set_messagestatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastResponse.messageStatus)
}
inline void BroadcastResponse::set_messagestatus(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastResponse.messageStatus)
}
inline std::string* BroadcastResponse::_internal_mutable_messagestatus() {
  _has_bits_[0] |= 0x00000001u;
  return messagestatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastResponse::release_messagestatus() {
  // @@protoc_insertion_point(field_release:chat.BroadcastResponse.messageStatus)
  if (!_internal_has_messagestatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return messagestatus_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastResponse::set_allocated_messagestatus(std::string* messagestatus) {
  if (messagestatus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  messagestatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messagestatus);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastResponse.messageStatus)
}

// -------------------------------------------------------------------

// BroadcastMessage

// required string message = 1;
inline bool BroadcastMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastMessage::has_message() const {
  return _internal_has_message();
}
inline void BroadcastMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastMessage.message)
  return _internal_message();
}
inline void BroadcastMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastMessage.message)
}
inline std::string* BroadcastMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.BroadcastMessage.message)
  return _internal_mutable_message();
}
inline const std::string& BroadcastMessage::_internal_message() const {
  return message_.GetNoArena();
}
inline void BroadcastMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcastMessage::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BroadcastMessage.message)
}
inline void BroadcastMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastMessage.message)
}
inline void BroadcastMessage::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastMessage.message)
}
inline std::string* BroadcastMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.BroadcastMessage.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastMessage.message)
}

// required int32 userId = 2;
inline bool BroadcastMessage::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BroadcastMessage::has_userid() const {
  return _internal_has_userid();
}
inline void BroadcastMessage::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastMessage::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastMessage.userId)
  return _internal_userid();
}
inline void BroadcastMessage::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void BroadcastMessage::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastMessage.userId)
}

// -------------------------------------------------------------------

// DirectMessageRequest

// required string message = 1;
inline bool DirectMessageRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DirectMessageRequest::has_message() const {
  return _internal_has_message();
}
inline void DirectMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DirectMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageRequest.message)
  return _internal_message();
}
inline void DirectMessageRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageRequest.message)
}
inline std::string* DirectMessageRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.DirectMessageRequest.message)
  return _internal_mutable_message();
}
inline const std::string& DirectMessageRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void DirectMessageRequest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DirectMessageRequest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.DirectMessageRequest.message)
}
inline void DirectMessageRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessageRequest.message)
}
inline void DirectMessageRequest::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessageRequest.message)
}
inline std::string* DirectMessageRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirectMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.DirectMessageRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirectMessageRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessageRequest.message)
}

// optional int32 userId = 2;
inline bool DirectMessageRequest::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DirectMessageRequest::has_userid() const {
  return _internal_has_userid();
}
inline void DirectMessageRequest::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectMessageRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectMessageRequest::userid() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageRequest.userId)
  return _internal_userid();
}
inline void DirectMessageRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void DirectMessageRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageRequest.userId)
}

// optional string username = 3;
inline bool DirectMessageRequest::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DirectMessageRequest::has_username() const {
  return _internal_has_username();
}
inline void DirectMessageRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DirectMessageRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageRequest.username)
  return _internal_username();
}
inline void DirectMessageRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageRequest.username)
}
inline std::string* DirectMessageRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.DirectMessageRequest.username)
  return _internal_mutable_username();
}
inline const std::string& DirectMessageRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void DirectMessageRequest::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DirectMessageRequest::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.DirectMessageRequest.username)
}
inline void DirectMessageRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessageRequest.username)
}
inline void DirectMessageRequest::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessageRequest.username)
}
inline std::string* DirectMessageRequest::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirectMessageRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.DirectMessageRequest.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirectMessageRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessageRequest.username)
}

// -------------------------------------------------------------------

// DirectMessageResponse

// required string messageStatus = 1;
inline bool DirectMessageResponse::_internal_has_messagestatus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DirectMessageResponse::has_messagestatus() const {
  return _internal_has_messagestatus();
}
inline void DirectMessageResponse::clear_messagestatus() {
  messagestatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DirectMessageResponse::messagestatus() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageResponse.messageStatus)
  return _internal_messagestatus();
}
inline void DirectMessageResponse::set_messagestatus(const std::string& value) {
  _internal_set_messagestatus(value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageResponse.messageStatus)
}
inline std::string* DirectMessageResponse::mutable_messagestatus() {
  // @@protoc_insertion_point(field_mutable:chat.DirectMessageResponse.messageStatus)
  return _internal_mutable_messagestatus();
}
inline const std::string& DirectMessageResponse::_internal_messagestatus() const {
  return messagestatus_.GetNoArena();
}
inline void DirectMessageResponse::_internal_set_messagestatus(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DirectMessageResponse::set_messagestatus(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.DirectMessageResponse.messageStatus)
}
inline void DirectMessageResponse::set_messagestatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessageResponse.messageStatus)
}
inline void DirectMessageResponse::set_messagestatus(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  messagestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessageResponse.messageStatus)
}
inline std::string* DirectMessageResponse::_internal_mutable_messagestatus() {
  _has_bits_[0] |= 0x00000001u;
  return messagestatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirectMessageResponse::release_messagestatus() {
  // @@protoc_insertion_point(field_release:chat.DirectMessageResponse.messageStatus)
  if (!_internal_has_messagestatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return messagestatus_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirectMessageResponse::set_allocated_messagestatus(std::string* messagestatus) {
  if (messagestatus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  messagestatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messagestatus);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessageResponse.messageStatus)
}

// -------------------------------------------------------------------

// DirectMessage

// required string message = 1;
inline bool DirectMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DirectMessage::has_message() const {
  return _internal_has_message();
}
inline void DirectMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DirectMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessage.message)
  return _internal_message();
}
inline void DirectMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.DirectMessage.message)
}
inline std::string* DirectMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.DirectMessage.message)
  return _internal_mutable_message();
}
inline const std::string& DirectMessage::_internal_message() const {
  return message_.GetNoArena();
}
inline void DirectMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DirectMessage::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.DirectMessage.message)
}
inline void DirectMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessage.message)
}
inline void DirectMessage::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessage.message)
}
inline std::string* DirectMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirectMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.DirectMessage.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirectMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessage.message)
}

// required int32 userId = 2;
inline bool DirectMessage::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DirectMessage::has_userid() const {
  return _internal_has_userid();
}
inline void DirectMessage::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectMessage::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessage.userId)
  return _internal_userid();
}
inline void DirectMessage::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void DirectMessage::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.DirectMessage.userId)
}

// -------------------------------------------------------------------

// ErrorResponse

// required string errorMessage = 1;
inline bool ErrorResponse::_internal_has_errormessage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorResponse::has_errormessage() const {
  return _internal_has_errormessage();
}
inline void ErrorResponse::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorResponse::errormessage() const {
  // @@protoc_insertion_point(field_get:chat.ErrorResponse.errorMessage)
  return _internal_errormessage();
}
inline void ErrorResponse::set_errormessage(const std::string& value) {
  _internal_set_errormessage(value);
  // @@protoc_insertion_point(field_set:chat.ErrorResponse.errorMessage)
}
inline std::string* ErrorResponse::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable:chat.ErrorResponse.errorMessage)
  return _internal_mutable_errormessage();
}
inline const std::string& ErrorResponse::_internal_errormessage() const {
  return errormessage_.GetNoArena();
}
inline void ErrorResponse::_internal_set_errormessage(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ErrorResponse::set_errormessage(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errormessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ErrorResponse.errorMessage)
}
inline void ErrorResponse::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ErrorResponse.errorMessage)
}
inline void ErrorResponse::set_errormessage(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ErrorResponse.errorMessage)
}
inline std::string* ErrorResponse::_internal_mutable_errormessage() {
  _has_bits_[0] |= 0x00000001u;
  return errormessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ErrorResponse::release_errormessage() {
  // @@protoc_insertion_point(field_release:chat.ErrorResponse.errorMessage)
  if (!_internal_has_errormessage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errormessage_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorResponse::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errormessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:chat.ErrorResponse.errorMessage)
}

// -------------------------------------------------------------------

// ClientMessage

// required int32 option = 1;
inline bool ClientMessage::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientMessage::has_option() const {
  return _internal_has_option();
}
inline void ClientMessage::clear_option() {
  option_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage::_internal_option() const {
  return option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage::option() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.option)
  return _internal_option();
}
inline void ClientMessage::_internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  option_ = value;
}
inline void ClientMessage::set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ClientMessage.option)
}

// optional int32 userId = 2;
inline bool ClientMessage::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientMessage::has_userid() const {
  return _internal_has_userid();
}
inline void ClientMessage::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.userId)
  return _internal_userid();
}
inline void ClientMessage::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  userid_ = value;
}
inline void ClientMessage::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.ClientMessage.userId)
}

// optional .chat.MyInfoSynchronize synchronize = 3;
inline bool ClientMessage::_internal_has_synchronize() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || synchronize_ != nullptr);
  return value;
}
inline bool ClientMessage::has_synchronize() const {
  return _internal_has_synchronize();
}
inline void ClientMessage::clear_synchronize() {
  if (synchronize_ != nullptr) synchronize_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::chat::MyInfoSynchronize& ClientMessage::_internal_synchronize() const {
  const ::chat::MyInfoSynchronize* p = synchronize_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MyInfoSynchronize*>(
      &::chat::_MyInfoSynchronize_default_instance_);
}
inline const ::chat::MyInfoSynchronize& ClientMessage::synchronize() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.synchronize)
  return _internal_synchronize();
}
inline ::chat::MyInfoSynchronize* ClientMessage::release_synchronize() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.synchronize)
  _has_bits_[0] &= ~0x00000001u;
  ::chat::MyInfoSynchronize* temp = synchronize_;
  synchronize_ = nullptr;
  return temp;
}
inline ::chat::MyInfoSynchronize* ClientMessage::_internal_mutable_synchronize() {
  _has_bits_[0] |= 0x00000001u;
  if (synchronize_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MyInfoSynchronize>(GetArenaNoVirtual());
    synchronize_ = p;
  }
  return synchronize_;
}
inline ::chat::MyInfoSynchronize* ClientMessage::mutable_synchronize() {
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.synchronize)
  return _internal_mutable_synchronize();
}
inline void ClientMessage::set_allocated_synchronize(::chat::MyInfoSynchronize* synchronize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete synchronize_;
  }
  if (synchronize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      synchronize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synchronize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  synchronize_ = synchronize;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.synchronize)
}

// optional .chat.connectedUserRequest connectedUsers = 4;
inline bool ClientMessage::_internal_has_connectedusers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || connectedusers_ != nullptr);
  return value;
}
inline bool ClientMessage::has_connectedusers() const {
  return _internal_has_connectedusers();
}
inline void ClientMessage::clear_connectedusers() {
  if (connectedusers_ != nullptr) connectedusers_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::connectedUserRequest& ClientMessage::_internal_connectedusers() const {
  const ::chat::connectedUserRequest* p = connectedusers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::connectedUserRequest*>(
      &::chat::_connectedUserRequest_default_instance_);
}
inline const ::chat::connectedUserRequest& ClientMessage::connectedusers() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.connectedUsers)
  return _internal_connectedusers();
}
inline ::chat::connectedUserRequest* ClientMessage::release_connectedusers() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.connectedUsers)
  _has_bits_[0] &= ~0x00000002u;
  ::chat::connectedUserRequest* temp = connectedusers_;
  connectedusers_ = nullptr;
  return temp;
}
inline ::chat::connectedUserRequest* ClientMessage::_internal_mutable_connectedusers() {
  _has_bits_[0] |= 0x00000002u;
  if (connectedusers_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::connectedUserRequest>(GetArenaNoVirtual());
    connectedusers_ = p;
  }
  return connectedusers_;
}
inline ::chat::connectedUserRequest* ClientMessage::mutable_connectedusers() {
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.connectedUsers)
  return _internal_mutable_connectedusers();
}
inline void ClientMessage::set_allocated_connectedusers(::chat::connectedUserRequest* connectedusers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connectedusers_;
  }
  if (connectedusers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connectedusers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectedusers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  connectedusers_ = connectedusers;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.connectedUsers)
}

// optional .chat.ChangeStatusRequest changeStatus = 5;
inline bool ClientMessage::_internal_has_changestatus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || changestatus_ != nullptr);
  return value;
}
inline bool ClientMessage::has_changestatus() const {
  return _internal_has_changestatus();
}
inline void ClientMessage::clear_changestatus() {
  if (changestatus_ != nullptr) changestatus_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::ChangeStatusRequest& ClientMessage::_internal_changestatus() const {
  const ::chat::ChangeStatusRequest* p = changestatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ChangeStatusRequest*>(
      &::chat::_ChangeStatusRequest_default_instance_);
}
inline const ::chat::ChangeStatusRequest& ClientMessage::changestatus() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.changeStatus)
  return _internal_changestatus();
}
inline ::chat::ChangeStatusRequest* ClientMessage::release_changestatus() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.changeStatus)
  _has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatusRequest* temp = changestatus_;
  changestatus_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatusRequest* ClientMessage::_internal_mutable_changestatus() {
  _has_bits_[0] |= 0x00000004u;
  if (changestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatusRequest>(GetArenaNoVirtual());
    changestatus_ = p;
  }
  return changestatus_;
}
inline ::chat::ChangeStatusRequest* ClientMessage::mutable_changestatus() {
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.changeStatus)
  return _internal_mutable_changestatus();
}
inline void ClientMessage::set_allocated_changestatus(::chat::ChangeStatusRequest* changestatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete changestatus_;
  }
  if (changestatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      changestatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changestatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  changestatus_ = changestatus;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.changeStatus)
}

// optional .chat.BroadcastRequest broadcast = 6;
inline bool ClientMessage::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_ != nullptr);
  return value;
}
inline bool ClientMessage::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void ClientMessage::clear_broadcast() {
  if (broadcast_ != nullptr) broadcast_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::BroadcastRequest& ClientMessage::_internal_broadcast() const {
  const ::chat::BroadcastRequest* p = broadcast_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::BroadcastRequest*>(
      &::chat::_BroadcastRequest_default_instance_);
}
inline const ::chat::BroadcastRequest& ClientMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.broadcast)
  return _internal_broadcast();
}
inline ::chat::BroadcastRequest* ClientMessage::release_broadcast() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.broadcast)
  _has_bits_[0] &= ~0x00000008u;
  ::chat::BroadcastRequest* temp = broadcast_;
  broadcast_ = nullptr;
  return temp;
}
inline ::chat::BroadcastRequest* ClientMessage::_internal_mutable_broadcast() {
  _has_bits_[0] |= 0x00000008u;
  if (broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::BroadcastRequest>(GetArenaNoVirtual());
    broadcast_ = p;
  }
  return broadcast_;
}
inline ::chat::BroadcastRequest* ClientMessage::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.broadcast)
  return _internal_mutable_broadcast();
}
inline void ClientMessage::set_allocated_broadcast(::chat::BroadcastRequest* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcast_;
  }
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.broadcast)
}

// optional .chat.DirectMessageRequest directMessage = 7;
inline bool ClientMessage::_internal_has_directmessage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || directmessage_ != nullptr);
  return value;
}
inline bool ClientMessage::has_directmessage() const {
  return _internal_has_directmessage();
}
inline void ClientMessage::clear_directmessage() {
  if (directmessage_ != nullptr) directmessage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::chat::DirectMessageRequest& ClientMessage::_internal_directmessage() const {
  const ::chat::DirectMessageRequest* p = directmessage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::DirectMessageRequest*>(
      &::chat::_DirectMessageRequest_default_instance_);
}
inline const ::chat::DirectMessageRequest& ClientMessage::directmessage() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.directMessage)
  return _internal_directmessage();
}
inline ::chat::DirectMessageRequest* ClientMessage::release_directmessage() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.directMessage)
  _has_bits_[0] &= ~0x00000010u;
  ::chat::DirectMessageRequest* temp = directmessage_;
  directmessage_ = nullptr;
  return temp;
}
inline ::chat::DirectMessageRequest* ClientMessage::_internal_mutable_directmessage() {
  _has_bits_[0] |= 0x00000010u;
  if (directmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::DirectMessageRequest>(GetArenaNoVirtual());
    directmessage_ = p;
  }
  return directmessage_;
}
inline ::chat::DirectMessageRequest* ClientMessage::mutable_directmessage() {
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.directMessage)
  return _internal_mutable_directmessage();
}
inline void ClientMessage::set_allocated_directmessage(::chat::DirectMessageRequest* directmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete directmessage_;
  }
  if (directmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      directmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directmessage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  directmessage_ = directmessage;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.directMessage)
}

// optional .chat.MyInfoAcknowledge acknowledge = 8;
inline bool ClientMessage::_internal_has_acknowledge() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || acknowledge_ != nullptr);
  return value;
}
inline bool ClientMessage::has_acknowledge() const {
  return _internal_has_acknowledge();
}
inline void ClientMessage::clear_acknowledge() {
  if (acknowledge_ != nullptr) acknowledge_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::chat::MyInfoAcknowledge& ClientMessage::_internal_acknowledge() const {
  const ::chat::MyInfoAcknowledge* p = acknowledge_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MyInfoAcknowledge*>(
      &::chat::_MyInfoAcknowledge_default_instance_);
}
inline const ::chat::MyInfoAcknowledge& ClientMessage::acknowledge() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.acknowledge)
  return _internal_acknowledge();
}
inline ::chat::MyInfoAcknowledge* ClientMessage::release_acknowledge() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.acknowledge)
  _has_bits_[0] &= ~0x00000020u;
  ::chat::MyInfoAcknowledge* temp = acknowledge_;
  acknowledge_ = nullptr;
  return temp;
}
inline ::chat::MyInfoAcknowledge* ClientMessage::_internal_mutable_acknowledge() {
  _has_bits_[0] |= 0x00000020u;
  if (acknowledge_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MyInfoAcknowledge>(GetArenaNoVirtual());
    acknowledge_ = p;
  }
  return acknowledge_;
}
inline ::chat::MyInfoAcknowledge* ClientMessage::mutable_acknowledge() {
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.acknowledge)
  return _internal_mutable_acknowledge();
}
inline void ClientMessage::set_allocated_acknowledge(::chat::MyInfoAcknowledge* acknowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acknowledge_;
  }
  if (acknowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acknowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acknowledge, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  acknowledge_ = acknowledge;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.acknowledge)
}

// -------------------------------------------------------------------

// ServerMessage

// required int32 option = 1;
inline bool ServerMessage::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ServerMessage::has_option() const {
  return _internal_has_option();
}
inline void ServerMessage::clear_option() {
  option_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerMessage::_internal_option() const {
  return option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerMessage::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.option)
  return _internal_option();
}
inline void ServerMessage::_internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  option_ = value;
}
inline void ServerMessage::set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ServerMessage.option)
}

// optional .chat.BroadcastMessage broadcast = 2;
inline bool ServerMessage::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_ != nullptr);
  return value;
}
inline bool ServerMessage::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void ServerMessage::clear_broadcast() {
  if (broadcast_ != nullptr) broadcast_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::chat::BroadcastMessage& ServerMessage::_internal_broadcast() const {
  const ::chat::BroadcastMessage* p = broadcast_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::BroadcastMessage*>(
      &::chat::_BroadcastMessage_default_instance_);
}
inline const ::chat::BroadcastMessage& ServerMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.broadcast)
  return _internal_broadcast();
}
inline ::chat::BroadcastMessage* ServerMessage::release_broadcast() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.broadcast)
  _has_bits_[0] &= ~0x00000001u;
  ::chat::BroadcastMessage* temp = broadcast_;
  broadcast_ = nullptr;
  return temp;
}
inline ::chat::BroadcastMessage* ServerMessage::_internal_mutable_broadcast() {
  _has_bits_[0] |= 0x00000001u;
  if (broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::BroadcastMessage>(GetArenaNoVirtual());
    broadcast_ = p;
  }
  return broadcast_;
}
inline ::chat::BroadcastMessage* ServerMessage::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.broadcast)
  return _internal_mutable_broadcast();
}
inline void ServerMessage::set_allocated_broadcast(::chat::BroadcastMessage* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcast_;
  }
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.broadcast)
}

// optional .chat.DirectMessage message = 3;
inline bool ServerMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool ServerMessage::has_message() const {
  return _internal_has_message();
}
inline void ServerMessage::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::DirectMessage& ServerMessage::_internal_message() const {
  const ::chat::DirectMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::DirectMessage*>(
      &::chat::_DirectMessage_default_instance_);
}
inline const ::chat::DirectMessage& ServerMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.message)
  return _internal_message();
}
inline ::chat::DirectMessage* ServerMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.message)
  _has_bits_[0] &= ~0x00000002u;
  ::chat::DirectMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::chat::DirectMessage* ServerMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::DirectMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::chat::DirectMessage* ServerMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.message)
  return _internal_mutable_message();
}
inline void ServerMessage::set_allocated_message(::chat::DirectMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.message)
}

// optional .chat.ErrorResponse error = 4;
inline bool ServerMessage::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || error_ != nullptr);
  return value;
}
inline bool ServerMessage::has_error() const {
  return _internal_has_error();
}
inline void ServerMessage::clear_error() {
  if (error_ != nullptr) error_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::ErrorResponse& ServerMessage::_internal_error() const {
  const ::chat::ErrorResponse* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ErrorResponse*>(
      &::chat::_ErrorResponse_default_instance_);
}
inline const ::chat::ErrorResponse& ServerMessage::error() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.error)
  return _internal_error();
}
inline ::chat::ErrorResponse* ServerMessage::release_error() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.error)
  _has_bits_[0] &= ~0x00000004u;
  ::chat::ErrorResponse* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::chat::ErrorResponse* ServerMessage::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000004u;
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ErrorResponse>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::chat::ErrorResponse* ServerMessage::mutable_error() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.error)
  return _internal_mutable_error();
}
inline void ServerMessage::set_allocated_error(::chat::ErrorResponse* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.error)
}

// optional .chat.MyInfoResponse myInfoResponse = 5;
inline bool ServerMessage::_internal_has_myinforesponse() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || myinforesponse_ != nullptr);
  return value;
}
inline bool ServerMessage::has_myinforesponse() const {
  return _internal_has_myinforesponse();
}
inline void ServerMessage::clear_myinforesponse() {
  if (myinforesponse_ != nullptr) myinforesponse_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::MyInfoResponse& ServerMessage::_internal_myinforesponse() const {
  const ::chat::MyInfoResponse* p = myinforesponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MyInfoResponse*>(
      &::chat::_MyInfoResponse_default_instance_);
}
inline const ::chat::MyInfoResponse& ServerMessage::myinforesponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.myInfoResponse)
  return _internal_myinforesponse();
}
inline ::chat::MyInfoResponse* ServerMessage::release_myinforesponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.myInfoResponse)
  _has_bits_[0] &= ~0x00000008u;
  ::chat::MyInfoResponse* temp = myinforesponse_;
  myinforesponse_ = nullptr;
  return temp;
}
inline ::chat::MyInfoResponse* ServerMessage::_internal_mutable_myinforesponse() {
  _has_bits_[0] |= 0x00000008u;
  if (myinforesponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MyInfoResponse>(GetArenaNoVirtual());
    myinforesponse_ = p;
  }
  return myinforesponse_;
}
inline ::chat::MyInfoResponse* ServerMessage::mutable_myinforesponse() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.myInfoResponse)
  return _internal_mutable_myinforesponse();
}
inline void ServerMessage::set_allocated_myinforesponse(::chat::MyInfoResponse* myinforesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete myinforesponse_;
  }
  if (myinforesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myinforesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myinforesponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  myinforesponse_ = myinforesponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.myInfoResponse)
}

// optional .chat.ConnectedUserResponse connectedUserResponse = 6;
inline bool ServerMessage::_internal_has_connecteduserresponse() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || connecteduserresponse_ != nullptr);
  return value;
}
inline bool ServerMessage::has_connecteduserresponse() const {
  return _internal_has_connecteduserresponse();
}
inline void ServerMessage::clear_connecteduserresponse() {
  if (connecteduserresponse_ != nullptr) connecteduserresponse_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::chat::ConnectedUserResponse& ServerMessage::_internal_connecteduserresponse() const {
  const ::chat::ConnectedUserResponse* p = connecteduserresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ConnectedUserResponse*>(
      &::chat::_ConnectedUserResponse_default_instance_);
}
inline const ::chat::ConnectedUserResponse& ServerMessage::connecteduserresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.connectedUserResponse)
  return _internal_connecteduserresponse();
}
inline ::chat::ConnectedUserResponse* ServerMessage::release_connecteduserresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.connectedUserResponse)
  _has_bits_[0] &= ~0x00000010u;
  ::chat::ConnectedUserResponse* temp = connecteduserresponse_;
  connecteduserresponse_ = nullptr;
  return temp;
}
inline ::chat::ConnectedUserResponse* ServerMessage::_internal_mutable_connecteduserresponse() {
  _has_bits_[0] |= 0x00000010u;
  if (connecteduserresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ConnectedUserResponse>(GetArenaNoVirtual());
    connecteduserresponse_ = p;
  }
  return connecteduserresponse_;
}
inline ::chat::ConnectedUserResponse* ServerMessage::mutable_connecteduserresponse() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.connectedUserResponse)
  return _internal_mutable_connecteduserresponse();
}
inline void ServerMessage::set_allocated_connecteduserresponse(::chat::ConnectedUserResponse* connecteduserresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connecteduserresponse_;
  }
  if (connecteduserresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connecteduserresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connecteduserresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  connecteduserresponse_ = connecteduserresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.connectedUserResponse)
}

// optional .chat.ChangeStatusResponse changeStatusResponse = 7;
inline bool ServerMessage::_internal_has_changestatusresponse() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || changestatusresponse_ != nullptr);
  return value;
}
inline bool ServerMessage::has_changestatusresponse() const {
  return _internal_has_changestatusresponse();
}
inline void ServerMessage::clear_changestatusresponse() {
  if (changestatusresponse_ != nullptr) changestatusresponse_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::chat::ChangeStatusResponse& ServerMessage::_internal_changestatusresponse() const {
  const ::chat::ChangeStatusResponse* p = changestatusresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ChangeStatusResponse*>(
      &::chat::_ChangeStatusResponse_default_instance_);
}
inline const ::chat::ChangeStatusResponse& ServerMessage::changestatusresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.changeStatusResponse)
  return _internal_changestatusresponse();
}
inline ::chat::ChangeStatusResponse* ServerMessage::release_changestatusresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.changeStatusResponse)
  _has_bits_[0] &= ~0x00000020u;
  ::chat::ChangeStatusResponse* temp = changestatusresponse_;
  changestatusresponse_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatusResponse* ServerMessage::_internal_mutable_changestatusresponse() {
  _has_bits_[0] |= 0x00000020u;
  if (changestatusresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatusResponse>(GetArenaNoVirtual());
    changestatusresponse_ = p;
  }
  return changestatusresponse_;
}
inline ::chat::ChangeStatusResponse* ServerMessage::mutable_changestatusresponse() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.changeStatusResponse)
  return _internal_mutable_changestatusresponse();
}
inline void ServerMessage::set_allocated_changestatusresponse(::chat::ChangeStatusResponse* changestatusresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete changestatusresponse_;
  }
  if (changestatusresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      changestatusresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changestatusresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  changestatusresponse_ = changestatusresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.changeStatusResponse)
}

// optional .chat.BroadcastResponse broadcastResponse = 8;
inline bool ServerMessage::_internal_has_broadcastresponse() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || broadcastresponse_ != nullptr);
  return value;
}
inline bool ServerMessage::has_broadcastresponse() const {
  return _internal_has_broadcastresponse();
}
inline void ServerMessage::clear_broadcastresponse() {
  if (broadcastresponse_ != nullptr) broadcastresponse_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::chat::BroadcastResponse& ServerMessage::_internal_broadcastresponse() const {
  const ::chat::BroadcastResponse* p = broadcastresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::BroadcastResponse*>(
      &::chat::_BroadcastResponse_default_instance_);
}
inline const ::chat::BroadcastResponse& ServerMessage::broadcastresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.broadcastResponse)
  return _internal_broadcastresponse();
}
inline ::chat::BroadcastResponse* ServerMessage::release_broadcastresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.broadcastResponse)
  _has_bits_[0] &= ~0x00000040u;
  ::chat::BroadcastResponse* temp = broadcastresponse_;
  broadcastresponse_ = nullptr;
  return temp;
}
inline ::chat::BroadcastResponse* ServerMessage::_internal_mutable_broadcastresponse() {
  _has_bits_[0] |= 0x00000040u;
  if (broadcastresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::BroadcastResponse>(GetArenaNoVirtual());
    broadcastresponse_ = p;
  }
  return broadcastresponse_;
}
inline ::chat::BroadcastResponse* ServerMessage::mutable_broadcastresponse() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.broadcastResponse)
  return _internal_mutable_broadcastresponse();
}
inline void ServerMessage::set_allocated_broadcastresponse(::chat::BroadcastResponse* broadcastresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcastresponse_;
  }
  if (broadcastresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcastresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcastresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  broadcastresponse_ = broadcastresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.broadcastResponse)
}

// optional .chat.DirectMessageResponse directMessageResponse = 9;
inline bool ServerMessage::_internal_has_directmessageresponse() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || directmessageresponse_ != nullptr);
  return value;
}
inline bool ServerMessage::has_directmessageresponse() const {
  return _internal_has_directmessageresponse();
}
inline void ServerMessage::clear_directmessageresponse() {
  if (directmessageresponse_ != nullptr) directmessageresponse_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::chat::DirectMessageResponse& ServerMessage::_internal_directmessageresponse() const {
  const ::chat::DirectMessageResponse* p = directmessageresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::DirectMessageResponse*>(
      &::chat::_DirectMessageResponse_default_instance_);
}
inline const ::chat::DirectMessageResponse& ServerMessage::directmessageresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.directMessageResponse)
  return _internal_directmessageresponse();
}
inline ::chat::DirectMessageResponse* ServerMessage::release_directmessageresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.directMessageResponse)
  _has_bits_[0] &= ~0x00000080u;
  ::chat::DirectMessageResponse* temp = directmessageresponse_;
  directmessageresponse_ = nullptr;
  return temp;
}
inline ::chat::DirectMessageResponse* ServerMessage::_internal_mutable_directmessageresponse() {
  _has_bits_[0] |= 0x00000080u;
  if (directmessageresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::DirectMessageResponse>(GetArenaNoVirtual());
    directmessageresponse_ = p;
  }
  return directmessageresponse_;
}
inline ::chat::DirectMessageResponse* ServerMessage::mutable_directmessageresponse() {
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.directMessageResponse)
  return _internal_mutable_directmessageresponse();
}
inline void ServerMessage::set_allocated_directmessageresponse(::chat::DirectMessageResponse* directmessageresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete directmessageresponse_;
  }
  if (directmessageresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      directmessageresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directmessageresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  directmessageresponse_ = directmessageresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.directMessageResponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto
