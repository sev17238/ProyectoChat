// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensaje.proto

#include "mensaje.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastMessage_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeStatusRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeStatusResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectedUser_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectedUserResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectMessage_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectMessageRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectMessageResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyInfoAcknowledge_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyInfoResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyInfoSynchronize_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_connectedUserRequest_mensaje_2eproto;
namespace chat {
class MyInfoSynchronizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyInfoSynchronize> _instance;
} _MyInfoSynchronize_default_instance_;
class MyInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyInfoResponse> _instance;
} _MyInfoResponse_default_instance_;
class MyInfoAcknowledgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyInfoAcknowledge> _instance;
} _MyInfoAcknowledge_default_instance_;
class connectedUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<connectedUserRequest> _instance;
} _connectedUserRequest_default_instance_;
class ConnectedUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectedUser> _instance;
} _ConnectedUser_default_instance_;
class ConnectedUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectedUserResponse> _instance;
} _ConnectedUserResponse_default_instance_;
class ChangeStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeStatusRequest> _instance;
} _ChangeStatusRequest_default_instance_;
class ChangeStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeStatusResponse> _instance;
} _ChangeStatusResponse_default_instance_;
class BroadcastRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRequest> _instance;
} _BroadcastRequest_default_instance_;
class BroadcastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastResponse> _instance;
} _BroadcastResponse_default_instance_;
class BroadcastMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastMessage> _instance;
} _BroadcastMessage_default_instance_;
class DirectMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectMessageRequest> _instance;
} _DirectMessageRequest_default_instance_;
class DirectMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectMessageResponse> _instance;
} _DirectMessageResponse_default_instance_;
class DirectMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectMessage> _instance;
} _DirectMessage_default_instance_;
class ErrorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorResponse> _instance;
} _ErrorResponse_default_instance_;
class ClientMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage> _instance;
} _ClientMessage_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerMessage> _instance;
} _ServerMessage_default_instance_;
}  // namespace chat
static void InitDefaultsscc_info_BroadcastMessage_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_BroadcastMessage_default_instance_;
    new (ptr) ::chat::BroadcastMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::BroadcastMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastMessage_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastMessage_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_BroadcastRequest_default_instance_;
    new (ptr) ::chat::BroadcastRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::BroadcastRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_BroadcastResponse_default_instance_;
    new (ptr) ::chat::BroadcastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::BroadcastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ChangeStatusRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChangeStatusRequest_default_instance_;
    new (ptr) ::chat::ChangeStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChangeStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeStatusRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeStatusRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ChangeStatusResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChangeStatusResponse_default_instance_;
    new (ptr) ::chat::ChangeStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChangeStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeStatusResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeStatusResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ClientMessage_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ClientMessage_default_instance_;
    new (ptr) ::chat::ClientMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ClientMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ClientMessage_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ClientMessage_mensaje_2eproto}, {
      &scc_info_MyInfoSynchronize_mensaje_2eproto.base,
      &scc_info_connectedUserRequest_mensaje_2eproto.base,
      &scc_info_ChangeStatusRequest_mensaje_2eproto.base,
      &scc_info_BroadcastRequest_mensaje_2eproto.base,
      &scc_info_DirectMessageRequest_mensaje_2eproto.base,
      &scc_info_MyInfoAcknowledge_mensaje_2eproto.base,}};

static void InitDefaultsscc_info_ConnectedUser_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ConnectedUser_default_instance_;
    new (ptr) ::chat::ConnectedUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ConnectedUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectedUser_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectedUser_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ConnectedUserResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ConnectedUserResponse_default_instance_;
    new (ptr) ::chat::ConnectedUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ConnectedUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectedUserResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectedUserResponse_mensaje_2eproto}, {
      &scc_info_ConnectedUser_mensaje_2eproto.base,}};

static void InitDefaultsscc_info_DirectMessage_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_DirectMessage_default_instance_;
    new (ptr) ::chat::DirectMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::DirectMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectMessage_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectMessage_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_DirectMessageRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_DirectMessageRequest_default_instance_;
    new (ptr) ::chat::DirectMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::DirectMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectMessageRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectMessageRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_DirectMessageResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_DirectMessageResponse_default_instance_;
    new (ptr) ::chat::DirectMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::DirectMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectMessageResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectMessageResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ErrorResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ErrorResponse_default_instance_;
    new (ptr) ::chat::ErrorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ErrorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_MyInfoAcknowledge_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MyInfoAcknowledge_default_instance_;
    new (ptr) ::chat::MyInfoAcknowledge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MyInfoAcknowledge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyInfoAcknowledge_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyInfoAcknowledge_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_MyInfoResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MyInfoResponse_default_instance_;
    new (ptr) ::chat::MyInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MyInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyInfoResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyInfoResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_MyInfoSynchronize_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MyInfoSynchronize_default_instance_;
    new (ptr) ::chat::MyInfoSynchronize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MyInfoSynchronize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyInfoSynchronize_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyInfoSynchronize_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ServerMessage_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ServerMessage_default_instance_;
    new (ptr) ::chat::ServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ServerMessage_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_ServerMessage_mensaje_2eproto}, {
      &scc_info_BroadcastMessage_mensaje_2eproto.base,
      &scc_info_DirectMessage_mensaje_2eproto.base,
      &scc_info_ErrorResponse_mensaje_2eproto.base,
      &scc_info_MyInfoResponse_mensaje_2eproto.base,
      &scc_info_ConnectedUserResponse_mensaje_2eproto.base,
      &scc_info_ChangeStatusResponse_mensaje_2eproto.base,
      &scc_info_BroadcastResponse_mensaje_2eproto.base,
      &scc_info_DirectMessageResponse_mensaje_2eproto.base,}};

static void InitDefaultsscc_info_connectedUserRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_connectedUserRequest_default_instance_;
    new (ptr) ::chat::connectedUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::connectedUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_connectedUserRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_connectedUserRequest_mensaje_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mensaje_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mensaje_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mensaje_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mensaje_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoSynchronize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoSynchronize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoSynchronize, username_),
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoSynchronize, ip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoResponse, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoAcknowledge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::MyInfoAcknowledge, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::connectedUserRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::connectedUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::connectedUserRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::chat::connectedUserRequest, username_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUser, username_),
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUser, status_),
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUser, userid_),
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUser, ip_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUserResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ConnectedUserResponse, connectedusers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusRequest, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusResponse, userid_),
  PROTOBUF_FIELD_OFFSET(::chat::ChangeStatusResponse, status_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastRequest, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, messagestatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastMessage, message_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastMessage, userid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageRequest, message_),
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageRequest, username_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessageResponse, messagestatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessage, message_),
  PROTOBUF_FIELD_OFFSET(::chat::DirectMessage, userid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::ErrorResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ErrorResponse, errormessage_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, option_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, userid_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, synchronize_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, connectedusers_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, changestatus_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, broadcast_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, directmessage_),
  PROTOBUF_FIELD_OFFSET(::chat::ClientMessage, acknowledge_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, option_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, broadcast_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, message_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, error_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, myinforesponse_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, connecteduserresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, changestatusresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, broadcastresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::ServerMessage, directmessageresponse_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::chat::MyInfoSynchronize)},
  { 9, 15, sizeof(::chat::MyInfoResponse)},
  { 16, 22, sizeof(::chat::MyInfoAcknowledge)},
  { 23, 30, sizeof(::chat::connectedUserRequest)},
  { 32, 41, sizeof(::chat::ConnectedUser)},
  { 45, 51, sizeof(::chat::ConnectedUserResponse)},
  { 52, 58, sizeof(::chat::ChangeStatusRequest)},
  { 59, 66, sizeof(::chat::ChangeStatusResponse)},
  { 68, 74, sizeof(::chat::BroadcastRequest)},
  { 75, 81, sizeof(::chat::BroadcastResponse)},
  { 82, 89, sizeof(::chat::BroadcastMessage)},
  { 91, 99, sizeof(::chat::DirectMessageRequest)},
  { 102, 108, sizeof(::chat::DirectMessageResponse)},
  { 109, 116, sizeof(::chat::DirectMessage)},
  { 118, 124, sizeof(::chat::ErrorResponse)},
  { 125, 138, sizeof(::chat::ClientMessage)},
  { 146, 160, sizeof(::chat::ServerMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_MyInfoSynchronize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_MyInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_MyInfoAcknowledge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_connectedUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ConnectedUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ConnectedUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChangeStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChangeStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_BroadcastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_BroadcastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_BroadcastMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_DirectMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_DirectMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_DirectMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ErrorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ServerMessage_default_instance_),
};

const char descriptor_table_protodef_mensaje_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmensaje.proto\022\004chat\"1\n\021MyInfoSynchroni"
  "ze\022\020\n\010username\030\001 \002(\t\022\n\n\002ip\030\002 \001(\t\" \n\016MyIn"
  "foResponse\022\016\n\006userId\030\001 \002(\005\"#\n\021MyInfoAckn"
  "owledge\022\016\n\006userId\030\001 \002(\005\"8\n\024connectedUser"
  "Request\022\016\n\006userId\030\001 \001(\005\022\020\n\010username\030\002 \001("
  "\t\"M\n\rConnectedUser\022\020\n\010username\030\001 \002(\t\022\016\n\006"
  "status\030\002 \001(\t\022\016\n\006userId\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t"
  "\"D\n\025ConnectedUserResponse\022+\n\016connectedUs"
  "ers\030\001 \003(\0132\023.chat.ConnectedUser\"%\n\023Change"
  "StatusRequest\022\016\n\006status\030\001 \002(\t\"6\n\024ChangeS"
  "tatusResponse\022\016\n\006userId\030\001 \002(\005\022\016\n\006status\030"
  "\002 \002(\t\"#\n\020BroadcastRequest\022\017\n\007message\030\001 \002"
  "(\t\"*\n\021BroadcastResponse\022\025\n\rmessageStatus"
  "\030\001 \002(\t\"3\n\020BroadcastMessage\022\017\n\007message\030\001 "
  "\002(\t\022\016\n\006userId\030\002 \002(\005\"I\n\024DirectMessageRequ"
  "est\022\017\n\007message\030\001 \002(\t\022\016\n\006userId\030\002 \001(\005\022\020\n\010"
  "username\030\003 \001(\t\".\n\025DirectMessageResponse\022"
  "\025\n\rmessageStatus\030\001 \002(\t\"0\n\rDirectMessage\022"
  "\017\n\007message\030\001 \002(\t\022\016\n\006userId\030\002 \002(\005\"%\n\rErro"
  "rResponse\022\024\n\014errorMessage\030\001 \002(\t\"\316\002\n\rClie"
  "ntMessage\022\016\n\006option\030\001 \002(\005\022\016\n\006userId\030\002 \001("
  "\005\022,\n\013synchronize\030\003 \001(\0132\027.chat.MyInfoSync"
  "hronize\0222\n\016connectedUsers\030\004 \001(\0132\032.chat.c"
  "onnectedUserRequest\022/\n\014changeStatus\030\005 \001("
  "\0132\031.chat.ChangeStatusRequest\022)\n\tbroadcas"
  "t\030\006 \001(\0132\026.chat.BroadcastRequest\0221\n\rdirec"
  "tMessage\030\007 \001(\0132\032.chat.DirectMessageReque"
  "st\022,\n\013acknowledge\030\010 \001(\0132\027.chat.MyInfoAck"
  "nowledge\"\250\003\n\rServerMessage\022\016\n\006option\030\001 \002"
  "(\005\022)\n\tbroadcast\030\002 \001(\0132\026.chat.BroadcastMe"
  "ssage\022$\n\007message\030\003 \001(\0132\023.chat.DirectMess"
  "age\022\"\n\005error\030\004 \001(\0132\023.chat.ErrorResponse\022"
  ",\n\016myInfoResponse\030\005 \001(\0132\024.chat.MyInfoRes"
  "ponse\022:\n\025connectedUserResponse\030\006 \001(\0132\033.c"
  "hat.ConnectedUserResponse\0228\n\024changeStatu"
  "sResponse\030\007 \001(\0132\032.chat.ChangeStatusRespo"
  "nse\0222\n\021broadcastResponse\030\010 \001(\0132\027.chat.Br"
  "oadcastResponse\022:\n\025directMessageResponse"
  "\030\t \001(\0132\033.chat.DirectMessageResponse"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mensaje_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mensaje_2eproto_sccs[17] = {
  &scc_info_BroadcastMessage_mensaje_2eproto.base,
  &scc_info_BroadcastRequest_mensaje_2eproto.base,
  &scc_info_BroadcastResponse_mensaje_2eproto.base,
  &scc_info_ChangeStatusRequest_mensaje_2eproto.base,
  &scc_info_ChangeStatusResponse_mensaje_2eproto.base,
  &scc_info_ClientMessage_mensaje_2eproto.base,
  &scc_info_ConnectedUser_mensaje_2eproto.base,
  &scc_info_ConnectedUserResponse_mensaje_2eproto.base,
  &scc_info_DirectMessage_mensaje_2eproto.base,
  &scc_info_DirectMessageRequest_mensaje_2eproto.base,
  &scc_info_DirectMessageResponse_mensaje_2eproto.base,
  &scc_info_ErrorResponse_mensaje_2eproto.base,
  &scc_info_MyInfoAcknowledge_mensaje_2eproto.base,
  &scc_info_MyInfoResponse_mensaje_2eproto.base,
  &scc_info_MyInfoSynchronize_mensaje_2eproto.base,
  &scc_info_ServerMessage_mensaje_2eproto.base,
  &scc_info_connectedUserRequest_mensaje_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mensaje_2eproto_once;
static bool descriptor_table_mensaje_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mensaje_2eproto = {
  &descriptor_table_mensaje_2eproto_initialized, descriptor_table_protodef_mensaje_2eproto, "mensaje.proto", 1555,
  &descriptor_table_mensaje_2eproto_once, descriptor_table_mensaje_2eproto_sccs, descriptor_table_mensaje_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_mensaje_2eproto::offsets,
  file_level_metadata_mensaje_2eproto, 17, file_level_enum_descriptors_mensaje_2eproto, file_level_service_descriptors_mensaje_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mensaje_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mensaje_2eproto), true);
namespace chat {

// ===================================================================

void MyInfoSynchronize::InitAsDefaultInstance() {
}
class MyInfoSynchronize::_Internal {
 public:
  using HasBits = decltype(std::declval<MyInfoSynchronize>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MyInfoSynchronize::MyInfoSynchronize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MyInfoSynchronize)
}
MyInfoSynchronize::MyInfoSynchronize(const MyInfoSynchronize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.MyInfoSynchronize)
}

void MyInfoSynchronize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyInfoSynchronize_mensaje_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MyInfoSynchronize::~MyInfoSynchronize() {
  // @@protoc_insertion_point(destructor:chat.MyInfoSynchronize)
  SharedDtor();
}

void MyInfoSynchronize::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MyInfoSynchronize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyInfoSynchronize& MyInfoSynchronize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyInfoSynchronize_mensaje_2eproto.base);
  return *internal_default_instance();
}


void MyInfoSynchronize::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MyInfoSynchronize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MyInfoSynchronize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MyInfoSynchronize.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MyInfoSynchronize.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyInfoSynchronize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MyInfoSynchronize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MyInfoSynchronize.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MyInfoSynchronize.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MyInfoSynchronize)
  return target;
}

size_t MyInfoSynchronize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MyInfoSynchronize)
  size_t total_size = 0;

  // required string username = 1;
  if (_internal_has_username()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ip = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyInfoSynchronize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MyInfoSynchronize)
  GOOGLE_DCHECK_NE(&from, this);
  const MyInfoSynchronize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyInfoSynchronize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MyInfoSynchronize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MyInfoSynchronize)
    MergeFrom(*source);
  }
}

void MyInfoSynchronize::MergeFrom(const MyInfoSynchronize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MyInfoSynchronize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
}

void MyInfoSynchronize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MyInfoSynchronize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyInfoSynchronize::CopyFrom(const MyInfoSynchronize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MyInfoSynchronize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyInfoSynchronize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MyInfoSynchronize::InternalSwap(MyInfoSynchronize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MyInfoSynchronize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyInfoResponse::InitAsDefaultInstance() {
}
class MyInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MyInfoResponse>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MyInfoResponse::MyInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MyInfoResponse)
}
MyInfoResponse::MyInfoResponse(const MyInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.MyInfoResponse)
}

void MyInfoResponse::SharedCtor() {
  userid_ = 0;
}

MyInfoResponse::~MyInfoResponse() {
  // @@protoc_insertion_point(destructor:chat.MyInfoResponse)
  SharedDtor();
}

void MyInfoResponse::SharedDtor() {
}

void MyInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyInfoResponse& MyInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyInfoResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void MyInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MyInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MyInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MyInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MyInfoResponse)
  return target;
}

size_t MyInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MyInfoResponse)
  size_t total_size = 0;

  // required int32 userId = 1;
  if (_internal_has_userid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MyInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MyInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MyInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MyInfoResponse)
    MergeFrom(*source);
  }
}

void MyInfoResponse::MergeFrom(const MyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MyInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void MyInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MyInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyInfoResponse::CopyFrom(const MyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MyInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MyInfoResponse::InternalSwap(MyInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyInfoAcknowledge::InitAsDefaultInstance() {
}
class MyInfoAcknowledge::_Internal {
 public:
  using HasBits = decltype(std::declval<MyInfoAcknowledge>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MyInfoAcknowledge::MyInfoAcknowledge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MyInfoAcknowledge)
}
MyInfoAcknowledge::MyInfoAcknowledge(const MyInfoAcknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.MyInfoAcknowledge)
}

void MyInfoAcknowledge::SharedCtor() {
  userid_ = 0;
}

MyInfoAcknowledge::~MyInfoAcknowledge() {
  // @@protoc_insertion_point(destructor:chat.MyInfoAcknowledge)
  SharedDtor();
}

void MyInfoAcknowledge::SharedDtor() {
}

void MyInfoAcknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyInfoAcknowledge& MyInfoAcknowledge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyInfoAcknowledge_mensaje_2eproto.base);
  return *internal_default_instance();
}


void MyInfoAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MyInfoAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MyInfoAcknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyInfoAcknowledge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MyInfoAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MyInfoAcknowledge)
  return target;
}

size_t MyInfoAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MyInfoAcknowledge)
  size_t total_size = 0;

  // required int32 userId = 1;
  if (_internal_has_userid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyInfoAcknowledge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MyInfoAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const MyInfoAcknowledge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyInfoAcknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MyInfoAcknowledge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MyInfoAcknowledge)
    MergeFrom(*source);
  }
}

void MyInfoAcknowledge::MergeFrom(const MyInfoAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MyInfoAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void MyInfoAcknowledge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MyInfoAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyInfoAcknowledge::CopyFrom(const MyInfoAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MyInfoAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyInfoAcknowledge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MyInfoAcknowledge::InternalSwap(MyInfoAcknowledge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyInfoAcknowledge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void connectedUserRequest::InitAsDefaultInstance() {
}
class connectedUserRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<connectedUserRequest>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

connectedUserRequest::connectedUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.connectedUserRequest)
}
connectedUserRequest::connectedUserRequest(const connectedUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.connectedUserRequest)
}

void connectedUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_connectedUserRequest_mensaje_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

connectedUserRequest::~connectedUserRequest() {
  // @@protoc_insertion_point(destructor:chat.connectedUserRequest)
  SharedDtor();
}

void connectedUserRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void connectedUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const connectedUserRequest& connectedUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_connectedUserRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void connectedUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.connectedUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* connectedUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.connectedUserRequest.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* connectedUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.connectedUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.connectedUserRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.connectedUserRequest)
  return target;
}

size_t connectedUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.connectedUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void connectedUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.connectedUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const connectedUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<connectedUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.connectedUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.connectedUserRequest)
    MergeFrom(*source);
  }
}

void connectedUserRequest::MergeFrom(const connectedUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.connectedUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void connectedUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.connectedUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connectedUserRequest::CopyFrom(const connectedUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.connectedUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connectedUserRequest::IsInitialized() const {
  return true;
}

void connectedUserRequest::InternalSwap(connectedUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata connectedUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectedUser::InitAsDefaultInstance() {
}
class ConnectedUser::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectedUser>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConnectedUser::ConnectedUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectedUser)
}
ConnectedUser::ConnectedUser(const ConnectedUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.ConnectedUser)
}

void ConnectedUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectedUser_mensaje_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

ConnectedUser::~ConnectedUser() {
  // @@protoc_insertion_point(destructor:chat.ConnectedUser)
  SharedDtor();
}

void ConnectedUser::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectedUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectedUser& ConnectedUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectedUser_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ConnectedUser::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectedUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      status_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConnectedUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ConnectedUser.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ConnectedUser.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ConnectedUser.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectedUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectedUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // optional int32 userId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  // optional string ip = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectedUser)
  return target;
}

size_t ConnectedUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectedUser)
  size_t total_size = 0;

  // required string username = 1;
  if (_internal_has_username()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status());
    }

    // optional string ip = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional int32 userId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectedUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectedUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectedUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectedUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectedUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectedUser)
    MergeFrom(*source);
  }
}

void ConnectedUser::MergeFrom(const ConnectedUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectedUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectedUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectedUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedUser::CopyFrom(const ConnectedUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectedUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ConnectedUser::InternalSwap(ConnectedUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectedUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectedUserResponse::InitAsDefaultInstance() {
}
class ConnectedUserResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectedUserResponse>()._has_bits_);
};

ConnectedUserResponse::ConnectedUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectedUserResponse)
}
ConnectedUserResponse::ConnectedUserResponse(const ConnectedUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      connectedusers_(from.connectedusers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat.ConnectedUserResponse)
}

void ConnectedUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectedUserResponse_mensaje_2eproto.base);
}

ConnectedUserResponse::~ConnectedUserResponse() {
  // @@protoc_insertion_point(destructor:chat.ConnectedUserResponse)
  SharedDtor();
}

void ConnectedUserResponse::SharedDtor() {
}

void ConnectedUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectedUserResponse& ConnectedUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectedUserResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ConnectedUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectedUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connectedusers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConnectedUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .chat.ConnectedUser connectedUsers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connectedusers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectedUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectedUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat.ConnectedUser connectedUsers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connectedusers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_connectedusers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectedUserResponse)
  return target;
}

size_t ConnectedUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectedUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chat.ConnectedUser connectedUsers = 1;
  total_size += 1UL * this->_internal_connectedusers_size();
  for (const auto& msg : this->connectedusers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectedUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectedUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectedUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectedUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectedUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectedUserResponse)
    MergeFrom(*source);
  }
}

void ConnectedUserResponse::MergeFrom(const ConnectedUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectedUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connectedusers_.MergeFrom(from.connectedusers_);
}

void ConnectedUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectedUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedUserResponse::CopyFrom(const ConnectedUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectedUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedUserResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(connectedusers_)) return false;
  return true;
}

void ConnectedUserResponse::InternalSwap(ConnectedUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connectedusers_.InternalSwap(&other->connectedusers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectedUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeStatusRequest::InitAsDefaultInstance() {
}
class ChangeStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeStatusRequest>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeStatusRequest::ChangeStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChangeStatusRequest)
}
ChangeStatusRequest::ChangeStatusRequest(const ChangeStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChangeStatusRequest)
}

void ChangeStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeStatusRequest_mensaje_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangeStatusRequest::~ChangeStatusRequest() {
  // @@protoc_insertion_point(destructor:chat.ChangeStatusRequest)
  SharedDtor();
}

void ChangeStatusRequest::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeStatusRequest& ChangeStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeStatusRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ChangeStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChangeStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChangeStatusRequest.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChangeStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChangeStatusRequest.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChangeStatusRequest)
  return target;
}

size_t ChangeStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChangeStatusRequest)
  size_t total_size = 0;

  // required string status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChangeStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChangeStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChangeStatusRequest)
    MergeFrom(*source);
  }
}

void ChangeStatusRequest::MergeFrom(const ChangeStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChangeStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _has_bits_[0] |= 0x00000001u;
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void ChangeStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChangeStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatusRequest::CopyFrom(const ChangeStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChangeStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChangeStatusRequest::InternalSwap(ChangeStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeStatusResponse::InitAsDefaultInstance() {
}
class ChangeStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeStatusResponse>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeStatusResponse::ChangeStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChangeStatusResponse)
}
ChangeStatusResponse::ChangeStatusResponse(const ChangeStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.ChangeStatusResponse)
}

void ChangeStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeStatusResponse_mensaje_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

ChangeStatusResponse::~ChangeStatusResponse() {
  // @@protoc_insertion_point(destructor:chat.ChangeStatusResponse)
  SharedDtor();
}

void ChangeStatusResponse::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeStatusResponse& ChangeStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeStatusResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ChangeStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChangeStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmptyNoArena();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChangeStatusResponse.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChangeStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // required string status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChangeStatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChangeStatusResponse)
  return target;
}

size_t ChangeStatusResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.ChangeStatusResponse)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (_internal_has_userid()) {
    // required int32 userId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  return total_size;
}
size_t ChangeStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChangeStatusResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());

    // required int32 userId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChangeStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChangeStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChangeStatusResponse)
    MergeFrom(*source);
  }
}

void ChangeStatusResponse::MergeFrom(const ChangeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChangeStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChangeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatusResponse::CopyFrom(const ChangeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChangeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChangeStatusResponse::InternalSwap(ChangeStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastRequest::InitAsDefaultInstance() {
}
class BroadcastRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastRequest>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BroadcastRequest::BroadcastRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastRequest)
}

void BroadcastRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastRequest_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:chat.BroadcastRequest)
  SharedDtor();
}

void BroadcastRequest::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRequest& BroadcastRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BroadcastRequest.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.BroadcastRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastRequest)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastRequest)
    MergeFrom(*source);
  }
}

void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void BroadcastRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastResponse::InitAsDefaultInstance() {
}
class BroadcastResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastResponse>()._has_bits_);
  static void set_has_messagestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BroadcastResponse::BroadcastResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastResponse)
}
BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_messagestatus()) {
    messagestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messagestatus_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastResponse)
}

void BroadcastResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastResponse_mensaje_2eproto.base);
  messagestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:chat.BroadcastResponse)
  SharedDtor();
}

void BroadcastResponse::SharedDtor() {
  messagestatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastResponse& BroadcastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    messagestatus_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BroadcastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string messageStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messagestatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BroadcastResponse.messageStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string messageStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_messagestatus().data(), static_cast<int>(this->_internal_messagestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.BroadcastResponse.messageStatus");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messagestatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastResponse)
  return target;
}

size_t BroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastResponse)
  size_t total_size = 0;

  // required string messageStatus = 1;
  if (_internal_has_messagestatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messagestatus());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastResponse)
    MergeFrom(*source);
  }
}

void BroadcastResponse::MergeFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_messagestatus()) {
    _has_bits_[0] |= 0x00000001u;
    messagestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messagestatus_);
  }
}

void BroadcastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messagestatus_.Swap(&other->messagestatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastMessage::InitAsDefaultInstance() {
}
class BroadcastMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastMessage>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BroadcastMessage::BroadcastMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastMessage)
}
BroadcastMessage::BroadcastMessage(const BroadcastMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastMessage)
}

void BroadcastMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastMessage_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

BroadcastMessage::~BroadcastMessage() {
  // @@protoc_insertion_point(destructor:chat.BroadcastMessage)
  SharedDtor();
}

void BroadcastMessage::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastMessage& BroadcastMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastMessage_mensaje_2eproto.base);
  return *internal_default_instance();
}


void BroadcastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BroadcastMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BroadcastMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.BroadcastMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required int32 userId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastMessage)
  return target;
}

size_t BroadcastMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.BroadcastMessage)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_userid()) {
    // required int32 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  return total_size;
}
size_t BroadcastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required int32 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastMessage)
    MergeFrom(*source);
  }
}

void BroadcastMessage::MergeFrom(const BroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BroadcastMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMessage::CopyFrom(const BroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BroadcastMessage::InternalSwap(BroadcastMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectMessageRequest::InitAsDefaultInstance() {
}
class DirectMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectMessageRequest>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DirectMessageRequest::DirectMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.DirectMessageRequest)
}
DirectMessageRequest::DirectMessageRequest(const DirectMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.DirectMessageRequest)
}

void DirectMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectMessageRequest_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

DirectMessageRequest::~DirectMessageRequest() {
  // @@protoc_insertion_point(destructor:chat.DirectMessageRequest)
  SharedDtor();
}

void DirectMessageRequest::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectMessageRequest& DirectMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectMessageRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void DirectMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.DirectMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DirectMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.DirectMessageRequest.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.DirectMessageRequest.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.DirectMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.DirectMessageRequest)
  return target;
}

size_t DirectMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.DirectMessageRequest)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string username = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional int32 userId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.DirectMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.DirectMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.DirectMessageRequest)
    MergeFrom(*source);
  }
}

void DirectMessageRequest::MergeFrom(const DirectMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.DirectMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.DirectMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMessageRequest::CopyFrom(const DirectMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.DirectMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DirectMessageRequest::InternalSwap(DirectMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectMessageResponse::InitAsDefaultInstance() {
}
class DirectMessageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectMessageResponse>()._has_bits_);
  static void set_has_messagestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DirectMessageResponse::DirectMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.DirectMessageResponse)
}
DirectMessageResponse::DirectMessageResponse(const DirectMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_messagestatus()) {
    messagestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messagestatus_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.DirectMessageResponse)
}

void DirectMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectMessageResponse_mensaje_2eproto.base);
  messagestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DirectMessageResponse::~DirectMessageResponse() {
  // @@protoc_insertion_point(destructor:chat.DirectMessageResponse)
  SharedDtor();
}

void DirectMessageResponse::SharedDtor() {
  messagestatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectMessageResponse& DirectMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectMessageResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void DirectMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.DirectMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    messagestatus_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DirectMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string messageStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messagestatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.DirectMessageResponse.messageStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.DirectMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string messageStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_messagestatus().data(), static_cast<int>(this->_internal_messagestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageResponse.messageStatus");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messagestatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.DirectMessageResponse)
  return target;
}

size_t DirectMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.DirectMessageResponse)
  size_t total_size = 0;

  // required string messageStatus = 1;
  if (_internal_has_messagestatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messagestatus());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.DirectMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.DirectMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.DirectMessageResponse)
    MergeFrom(*source);
  }
}

void DirectMessageResponse::MergeFrom(const DirectMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.DirectMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_messagestatus()) {
    _has_bits_[0] |= 0x00000001u;
    messagestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messagestatus_);
  }
}

void DirectMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.DirectMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMessageResponse::CopyFrom(const DirectMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.DirectMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DirectMessageResponse::InternalSwap(DirectMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messagestatus_.Swap(&other->messagestatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectMessage::InitAsDefaultInstance() {
}
class DirectMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectMessage>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DirectMessage::DirectMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.DirectMessage)
}
DirectMessage::DirectMessage(const DirectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:chat.DirectMessage)
}

void DirectMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectMessage_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

DirectMessage::~DirectMessage() {
  // @@protoc_insertion_point(destructor:chat.DirectMessage)
  SharedDtor();
}

void DirectMessage::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectMessage& DirectMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectMessage_mensaje_2eproto.base);
  return *internal_default_instance();
}


void DirectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.DirectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DirectMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.DirectMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.DirectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.DirectMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required int32 userId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.DirectMessage)
  return target;
}

size_t DirectMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.DirectMessage)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_userid()) {
    // required int32 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  return total_size;
}
size_t DirectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.DirectMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required int32 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.DirectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.DirectMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.DirectMessage)
    MergeFrom(*source);
  }
}

void DirectMessage::MergeFrom(const DirectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.DirectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.DirectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMessage::CopyFrom(const DirectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.DirectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DirectMessage::InternalSwap(DirectMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorResponse::InitAsDefaultInstance() {
}
class ErrorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorResponse>()._has_bits_);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErrorResponse::ErrorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ErrorResponse)
}
ErrorResponse::ErrorResponse(const ErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errormessage()) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.ErrorResponse)
}

void ErrorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorResponse_mensaje_2eproto.base);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:chat.ErrorResponse)
  SharedDtor();
}

void ErrorResponse::SharedDtor() {
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorResponse& ErrorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errormessage_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string errorMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ErrorResponse.errorMessage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string errorMessage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ErrorResponse.errorMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ErrorResponse)
  return target;
}

size_t ErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ErrorResponse)
  size_t total_size = 0;

  // required string errorMessage = 1;
  if (_internal_has_errormessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ErrorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ErrorResponse)
    MergeFrom(*source);
  }
}

void ErrorResponse::MergeFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errormessage()) {
    _has_bits_[0] |= 0x00000001u;
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
}

void ErrorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ErrorResponse::InternalSwap(ErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage::InitAsDefaultInstance() {
  ::chat::_ClientMessage_default_instance_._instance.get_mutable()->synchronize_ = const_cast< ::chat::MyInfoSynchronize*>(
      ::chat::MyInfoSynchronize::internal_default_instance());
  ::chat::_ClientMessage_default_instance_._instance.get_mutable()->connectedusers_ = const_cast< ::chat::connectedUserRequest*>(
      ::chat::connectedUserRequest::internal_default_instance());
  ::chat::_ClientMessage_default_instance_._instance.get_mutable()->changestatus_ = const_cast< ::chat::ChangeStatusRequest*>(
      ::chat::ChangeStatusRequest::internal_default_instance());
  ::chat::_ClientMessage_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::chat::BroadcastRequest*>(
      ::chat::BroadcastRequest::internal_default_instance());
  ::chat::_ClientMessage_default_instance_._instance.get_mutable()->directmessage_ = const_cast< ::chat::DirectMessageRequest*>(
      ::chat::DirectMessageRequest::internal_default_instance());
  ::chat::_ClientMessage_default_instance_._instance.get_mutable()->acknowledge_ = const_cast< ::chat::MyInfoAcknowledge*>(
      ::chat::MyInfoAcknowledge::internal_default_instance());
}
class ClientMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientMessage>()._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::chat::MyInfoSynchronize& synchronize(const ClientMessage* msg);
  static void set_has_synchronize(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::chat::connectedUserRequest& connectedusers(const ClientMessage* msg);
  static void set_has_connectedusers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::chat::ChangeStatusRequest& changestatus(const ClientMessage* msg);
  static void set_has_changestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::chat::BroadcastRequest& broadcast(const ClientMessage* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::chat::DirectMessageRequest& directmessage(const ClientMessage* msg);
  static void set_has_directmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::chat::MyInfoAcknowledge& acknowledge(const ClientMessage* msg);
  static void set_has_acknowledge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::chat::MyInfoSynchronize&
ClientMessage::_Internal::synchronize(const ClientMessage* msg) {
  return *msg->synchronize_;
}
const ::chat::connectedUserRequest&
ClientMessage::_Internal::connectedusers(const ClientMessage* msg) {
  return *msg->connectedusers_;
}
const ::chat::ChangeStatusRequest&
ClientMessage::_Internal::changestatus(const ClientMessage* msg) {
  return *msg->changestatus_;
}
const ::chat::BroadcastRequest&
ClientMessage::_Internal::broadcast(const ClientMessage* msg) {
  return *msg->broadcast_;
}
const ::chat::DirectMessageRequest&
ClientMessage::_Internal::directmessage(const ClientMessage* msg) {
  return *msg->directmessage_;
}
const ::chat::MyInfoAcknowledge&
ClientMessage::_Internal::acknowledge(const ClientMessage* msg) {
  return *msg->acknowledge_;
}
ClientMessage::ClientMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_synchronize()) {
    synchronize_ = new ::chat::MyInfoSynchronize(*from.synchronize_);
  } else {
    synchronize_ = nullptr;
  }
  if (from._internal_has_connectedusers()) {
    connectedusers_ = new ::chat::connectedUserRequest(*from.connectedusers_);
  } else {
    connectedusers_ = nullptr;
  }
  if (from._internal_has_changestatus()) {
    changestatus_ = new ::chat::ChangeStatusRequest(*from.changestatus_);
  } else {
    changestatus_ = nullptr;
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::chat::BroadcastRequest(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  if (from._internal_has_directmessage()) {
    directmessage_ = new ::chat::DirectMessageRequest(*from.directmessage_);
  } else {
    directmessage_ = nullptr;
  }
  if (from._internal_has_acknowledge()) {
    acknowledge_ = new ::chat::MyInfoAcknowledge(*from.acknowledge_);
  } else {
    acknowledge_ = nullptr;
  }
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&option_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:chat.ClientMessage)
}

void ClientMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_mensaje_2eproto.base);
  ::memset(&synchronize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&synchronize_)) + sizeof(userid_));
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:chat.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != internal_default_instance()) delete synchronize_;
  if (this != internal_default_instance()) delete connectedusers_;
  if (this != internal_default_instance()) delete changestatus_;
  if (this != internal_default_instance()) delete broadcast_;
  if (this != internal_default_instance()) delete directmessage_;
  if (this != internal_default_instance()) delete acknowledge_;
}

void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage& ClientMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(synchronize_ != nullptr);
      synchronize_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connectedusers_ != nullptr);
      connectedusers_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(changestatus_ != nullptr);
      changestatus_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(directmessage_ != nullptr);
      directmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(acknowledge_ != nullptr);
      acknowledge_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&option_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_option(&has_bits);
          option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.MyInfoSynchronize synchronize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_synchronize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.connectedUserRequest connectedUsers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connectedusers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.ChangeStatusRequest changeStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_changestatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.BroadcastRequest broadcast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.DirectMessageRequest directMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_directmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.MyInfoAcknowledge acknowledge = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_acknowledge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 option = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_option(), target);
  }

  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  // optional .chat.MyInfoSynchronize synchronize = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::synchronize(this), target, stream);
  }

  // optional .chat.connectedUserRequest connectedUsers = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connectedusers(this), target, stream);
  }

  // optional .chat.ChangeStatusRequest changeStatus = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::changestatus(this), target, stream);
  }

  // optional .chat.BroadcastRequest broadcast = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::broadcast(this), target, stream);
  }

  // optional .chat.DirectMessageRequest directMessage = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::directmessage(this), target, stream);
  }

  // optional .chat.MyInfoAcknowledge acknowledge = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::acknowledge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientMessage)
  size_t total_size = 0;

  // required int32 option = 1;
  if (_internal_has_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_option());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .chat.MyInfoSynchronize synchronize = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *synchronize_);
    }

    // optional .chat.connectedUserRequest connectedUsers = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connectedusers_);
    }

    // optional .chat.ChangeStatusRequest changeStatus = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changestatus_);
    }

    // optional .chat.BroadcastRequest broadcast = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional .chat.DirectMessageRequest directMessage = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *directmessage_);
    }

    // optional .chat.MyInfoAcknowledge acknowledge = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acknowledge_);
    }

  }
  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_synchronize()->::chat::MyInfoSynchronize::MergeFrom(from._internal_synchronize());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_connectedusers()->::chat::connectedUserRequest::MergeFrom(from._internal_connectedusers());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_changestatus()->::chat::ChangeStatusRequest::MergeFrom(from._internal_changestatus());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_broadcast()->::chat::BroadcastRequest::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_directmessage()->::chat::DirectMessageRequest::MergeFrom(from._internal_directmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_acknowledge()->::chat::MyInfoAcknowledge::MergeFrom(from._internal_acknowledge());
    }
    if (cached_has_bits & 0x00000040u) {
      option_ = from.option_;
    }
    if (cached_has_bits & 0x00000080u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (_internal_has_synchronize()) {
    if (!synchronize_->IsInitialized()) return false;
  }
  if (_internal_has_changestatus()) {
    if (!changestatus_->IsInitialized()) return false;
  }
  if (_internal_has_broadcast()) {
    if (!broadcast_->IsInitialized()) return false;
  }
  if (_internal_has_directmessage()) {
    if (!directmessage_->IsInitialized()) return false;
  }
  if (_internal_has_acknowledge()) {
    if (!acknowledge_->IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(synchronize_, other->synchronize_);
  swap(connectedusers_, other->connectedusers_);
  swap(changestatus_, other->changestatus_);
  swap(broadcast_, other->broadcast_);
  swap(directmessage_, other->directmessage_);
  swap(acknowledge_, other->acknowledge_);
  swap(option_, other->option_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::chat::BroadcastMessage*>(
      ::chat::BroadcastMessage::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->message_ = const_cast< ::chat::DirectMessage*>(
      ::chat::DirectMessage::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->error_ = const_cast< ::chat::ErrorResponse*>(
      ::chat::ErrorResponse::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->myinforesponse_ = const_cast< ::chat::MyInfoResponse*>(
      ::chat::MyInfoResponse::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->connecteduserresponse_ = const_cast< ::chat::ConnectedUserResponse*>(
      ::chat::ConnectedUserResponse::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->changestatusresponse_ = const_cast< ::chat::ChangeStatusResponse*>(
      ::chat::ChangeStatusResponse::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->broadcastresponse_ = const_cast< ::chat::BroadcastResponse*>(
      ::chat::BroadcastResponse::internal_default_instance());
  ::chat::_ServerMessage_default_instance_._instance.get_mutable()->directmessageresponse_ = const_cast< ::chat::DirectMessageResponse*>(
      ::chat::DirectMessageResponse::internal_default_instance());
}
class ServerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerMessage>()._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::chat::BroadcastMessage& broadcast(const ServerMessage* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::chat::DirectMessage& message(const ServerMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::chat::ErrorResponse& error(const ServerMessage* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::chat::MyInfoResponse& myinforesponse(const ServerMessage* msg);
  static void set_has_myinforesponse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::chat::ConnectedUserResponse& connecteduserresponse(const ServerMessage* msg);
  static void set_has_connecteduserresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::chat::ChangeStatusResponse& changestatusresponse(const ServerMessage* msg);
  static void set_has_changestatusresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::chat::BroadcastResponse& broadcastresponse(const ServerMessage* msg);
  static void set_has_broadcastresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::chat::DirectMessageResponse& directmessageresponse(const ServerMessage* msg);
  static void set_has_directmessageresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::chat::BroadcastMessage&
ServerMessage::_Internal::broadcast(const ServerMessage* msg) {
  return *msg->broadcast_;
}
const ::chat::DirectMessage&
ServerMessage::_Internal::message(const ServerMessage* msg) {
  return *msg->message_;
}
const ::chat::ErrorResponse&
ServerMessage::_Internal::error(const ServerMessage* msg) {
  return *msg->error_;
}
const ::chat::MyInfoResponse&
ServerMessage::_Internal::myinforesponse(const ServerMessage* msg) {
  return *msg->myinforesponse_;
}
const ::chat::ConnectedUserResponse&
ServerMessage::_Internal::connecteduserresponse(const ServerMessage* msg) {
  return *msg->connecteduserresponse_;
}
const ::chat::ChangeStatusResponse&
ServerMessage::_Internal::changestatusresponse(const ServerMessage* msg) {
  return *msg->changestatusresponse_;
}
const ::chat::BroadcastResponse&
ServerMessage::_Internal::broadcastresponse(const ServerMessage* msg) {
  return *msg->broadcastresponse_;
}
const ::chat::DirectMessageResponse&
ServerMessage::_Internal::directmessageresponse(const ServerMessage* msg) {
  return *msg->directmessageresponse_;
}
ServerMessage::ServerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::chat::BroadcastMessage(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::chat::DirectMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::chat::ErrorResponse(*from.error_);
  } else {
    error_ = nullptr;
  }
  if (from._internal_has_myinforesponse()) {
    myinforesponse_ = new ::chat::MyInfoResponse(*from.myinforesponse_);
  } else {
    myinforesponse_ = nullptr;
  }
  if (from._internal_has_connecteduserresponse()) {
    connecteduserresponse_ = new ::chat::ConnectedUserResponse(*from.connecteduserresponse_);
  } else {
    connecteduserresponse_ = nullptr;
  }
  if (from._internal_has_changestatusresponse()) {
    changestatusresponse_ = new ::chat::ChangeStatusResponse(*from.changestatusresponse_);
  } else {
    changestatusresponse_ = nullptr;
  }
  if (from._internal_has_broadcastresponse()) {
    broadcastresponse_ = new ::chat::BroadcastResponse(*from.broadcastresponse_);
  } else {
    broadcastresponse_ = nullptr;
  }
  if (from._internal_has_directmessageresponse()) {
    directmessageresponse_ = new ::chat::DirectMessageResponse(*from.directmessageresponse_);
  } else {
    directmessageresponse_ = nullptr;
  }
  option_ = from.option_;
  // @@protoc_insertion_point(copy_constructor:chat.ServerMessage)
}

void ServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerMessage_mensaje_2eproto.base);
  ::memset(&broadcast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_) -
      reinterpret_cast<char*>(&broadcast_)) + sizeof(option_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:chat.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (this != internal_default_instance()) delete broadcast_;
  if (this != internal_default_instance()) delete message_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete myinforesponse_;
  if (this != internal_default_instance()) delete connecteduserresponse_;
  if (this != internal_default_instance()) delete changestatusresponse_;
  if (this != internal_default_instance()) delete broadcastresponse_;
  if (this != internal_default_instance()) delete directmessageresponse_;
}

void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMessage& ServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerMessage_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_ != nullptr);
      message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(error_ != nullptr);
      error_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(myinforesponse_ != nullptr);
      myinforesponse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(connecteduserresponse_ != nullptr);
      connecteduserresponse_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(changestatusresponse_ != nullptr);
      changestatusresponse_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(broadcastresponse_ != nullptr);
      broadcastresponse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(directmessageresponse_ != nullptr);
      directmessageresponse_->Clear();
    }
  }
  option_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_option(&has_bits);
          option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.BroadcastMessage broadcast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.DirectMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.ErrorResponse error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.MyInfoResponse myInfoResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_myinforesponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_connecteduserresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_changestatusresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.BroadcastResponse broadcastResponse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcastresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.DirectMessageResponse directMessageResponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_directmessageresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 option = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_option(), target);
  }

  // optional .chat.BroadcastMessage broadcast = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::broadcast(this), target, stream);
  }

  // optional .chat.DirectMessage message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // optional .chat.ErrorResponse error = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::error(this), target, stream);
  }

  // optional .chat.MyInfoResponse myInfoResponse = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::myinforesponse(this), target, stream);
  }

  // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::connecteduserresponse(this), target, stream);
  }

  // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::changestatusresponse(this), target, stream);
  }

  // optional .chat.BroadcastResponse broadcastResponse = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::broadcastresponse(this), target, stream);
  }

  // optional .chat.DirectMessageResponse directMessageResponse = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::directmessageresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ServerMessage)
  size_t total_size = 0;

  // required int32 option = 1;
  if (_internal_has_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_option());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .chat.BroadcastMessage broadcast = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional .chat.DirectMessage message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional .chat.ErrorResponse error = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .chat.MyInfoResponse myInfoResponse = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *myinforesponse_);
    }

    // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connecteduserresponse_);
    }

    // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changestatusresponse_);
    }

    // optional .chat.BroadcastResponse broadcastResponse = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcastresponse_);
    }

    // optional .chat.DirectMessageResponse directMessageResponse = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *directmessageresponse_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_broadcast()->::chat::BroadcastMessage::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message()->::chat::DirectMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_error()->::chat::ErrorResponse::MergeFrom(from._internal_error());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_myinforesponse()->::chat::MyInfoResponse::MergeFrom(from._internal_myinforesponse());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_connecteduserresponse()->::chat::ConnectedUserResponse::MergeFrom(from._internal_connecteduserresponse());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_changestatusresponse()->::chat::ChangeStatusResponse::MergeFrom(from._internal_changestatusresponse());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_broadcastresponse()->::chat::BroadcastResponse::MergeFrom(from._internal_broadcastresponse());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_directmessageresponse()->::chat::DirectMessageResponse::MergeFrom(from._internal_directmessageresponse());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_option(from._internal_option());
  }
}

void ServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (_internal_has_broadcast()) {
    if (!broadcast_->IsInitialized()) return false;
  }
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  if (_internal_has_error()) {
    if (!error_->IsInitialized()) return false;
  }
  if (_internal_has_myinforesponse()) {
    if (!myinforesponse_->IsInitialized()) return false;
  }
  if (_internal_has_connecteduserresponse()) {
    if (!connecteduserresponse_->IsInitialized()) return false;
  }
  if (_internal_has_changestatusresponse()) {
    if (!changestatusresponse_->IsInitialized()) return false;
  }
  if (_internal_has_broadcastresponse()) {
    if (!broadcastresponse_->IsInitialized()) return false;
  }
  if (_internal_has_directmessageresponse()) {
    if (!directmessageresponse_->IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_, other->broadcast_);
  swap(message_, other->message_);
  swap(error_, other->error_);
  swap(myinforesponse_, other->myinforesponse_);
  swap(connecteduserresponse_, other->connecteduserresponse_);
  swap(changestatusresponse_, other->changestatusresponse_);
  swap(broadcastresponse_, other->broadcastresponse_);
  swap(directmessageresponse_, other->directmessageresponse_);
  swap(option_, other->option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chat::MyInfoSynchronize* Arena::CreateMaybeMessage< ::chat::MyInfoSynchronize >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MyInfoSynchronize >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::MyInfoResponse* Arena::CreateMaybeMessage< ::chat::MyInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MyInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::MyInfoAcknowledge* Arena::CreateMaybeMessage< ::chat::MyInfoAcknowledge >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MyInfoAcknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::connectedUserRequest* Arena::CreateMaybeMessage< ::chat::connectedUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::connectedUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ConnectedUser* Arena::CreateMaybeMessage< ::chat::ConnectedUser >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ConnectedUser >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ConnectedUserResponse* Arena::CreateMaybeMessage< ::chat::ConnectedUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ConnectedUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChangeStatusRequest* Arena::CreateMaybeMessage< ::chat::ChangeStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ChangeStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChangeStatusResponse* Arena::CreateMaybeMessage< ::chat::ChangeStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ChangeStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::BroadcastRequest* Arena::CreateMaybeMessage< ::chat::BroadcastRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::BroadcastResponse* Arena::CreateMaybeMessage< ::chat::BroadcastResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::BroadcastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::BroadcastMessage* Arena::CreateMaybeMessage< ::chat::BroadcastMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chat::BroadcastMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::DirectMessageRequest* Arena::CreateMaybeMessage< ::chat::DirectMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::DirectMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::DirectMessageResponse* Arena::CreateMaybeMessage< ::chat::DirectMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::DirectMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::DirectMessage* Arena::CreateMaybeMessage< ::chat::DirectMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chat::DirectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ErrorResponse* Arena::CreateMaybeMessage< ::chat::ErrorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ClientMessage* Arena::CreateMaybeMessage< ::chat::ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ServerMessage* Arena::CreateMaybeMessage< ::chat::ServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
